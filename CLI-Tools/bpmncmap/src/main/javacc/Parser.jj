/* Parse propositional logic of configuration conditions, based on BDDC's format. */

options {
  LOOKAHEAD = 1;
  CHOICE_AMBIGUITY_CHECK = 2;
  OTHER_AMBIGUITY_CHECK = 1;
  STATIC = false;
  DEBUG_PARSER = false;
  DEBUG_LOOKAHEAD = false;
  DEBUG_TOKEN_MANAGER = false;
  ERROR_REPORTING = true;
  JAVA_UNICODE_ESCAPE = false;
  UNICODE_INPUT = false;
  IGNORE_CASE = false;
  USER_TOKEN_MANAGER = false;
  USER_CHAR_STREAM = false;
  BUILD_PARSER = true;
  BUILD_TOKEN_MANAGER = true;
  SANITY_CHECK = true;
  FORCE_LA_CHECK = false;
}

PARSER_BEGIN(Parser)

package org.apromore.bpmncmap.parser;

import java.io.InputStream;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import net.sf.javabdd.BDD;
import net.sf.javabdd.BDDFactory;
import net.sf.javabdd.JFactory;

/** Parse propositional logic of configuration conditions, based on BDDC's format. */
public class Parser {

  private static final int MAX_VARIABLES = 100;

  private BDDFactory factory = null;
  private Map<String, Integer> variableMap = new HashMap<String, Integer>();
  private int nextVariableIndex = 0;

  public void init() {
    factory = JFactory.init(1000, 1000);
    factory.setVarNum(MAX_VARIABLES);
  }

  /** Main entry point. */
  public static void main(String args[]) throws ParseException {
    Parser parser = new Parser(System.in);
    parser.init();
    parser.Start();
  }

  /**
   * @param propositions  a collection of propositions
   * @return whether exactly one of the <var>propositions</var> is true
   */
  public BDD exactlyOne(Collection<BDD> propositions) {
    BDD sum = factory.zero();
    for (BDD x: propositions) {
      BDD product = factory.one();
      for (BDD y: propositions) {
          product = product.and((x == y) ? y : y.not());
      }  // at the end of this loop, product is the proposition that only x is true
      sum = sum.orWith(product);
    }
    return sum;
  }

  public BDD findVariable(final String s) {
    if (variableMap.containsKey(s)) {
      return factory.ithVar(variableMap.get(s));
    } else {
      BDD newVariable = factory.ithVar(nextVariableIndex);
      variableMap.put(s, nextVariableIndex);
      nextVariableIndex++;
      assert nextVariableIndex < MAX_VARIABLES : "Exceeded allocated number of variables";
      return newVariable;
    }
  }

  public int findVariableIndex(final String s, boolean create) {
    if (variableMap.containsKey(s)) {
      return variableMap.get(s);
    } else if (create) {
      BDD newVariable = factory.ithVar(nextVariableIndex);
      variableMap.put(s, nextVariableIndex);
      nextVariableIndex++;
      assert nextVariableIndex < 10 : "Exceeded allocated number of variables";
      return nextVariableIndex - 1;
    } else {
      return -1;
    }
  }

  public BDDFactory getFactory() {
    return factory;
  }

  public Map<String, Integer> getVariableMap() {
    return variableMap;
  }

  /**
   * N-ary functions on {@link BDD}s.
   */
  interface NaryFunction {
    BDD eval(final List<BDD> parameters);
  }

  class ExactlyOneFunction implements NaryFunction {
    public BDD eval(final List<BDD> parameterList) {
      return exactlyOne(parameterList);
    }
  }

  class NorFunction implements NaryFunction {
    public BDD eval(final List<BDD> parameterList) {
      return fold(factory.or, parameterList, factory.zero()).not();
    };
  }

  class XorFunction implements NaryFunction {
    public BDD eval(final List<BDD> parameterList) {
      assert parameterList.size() == 2;
      return parameterList.get(0).xor(parameterList.get(1));
    };
  }

  private static BDD fold(BDDFactory.BDDOp op, Collection<BDD> list, BDD kernel) {
    BDD x = kernel;
    for (BDD y : list) {
      x.applyWith(y, op);
    }
    return x;
  }
}

PARSER_END(Parser)

/* Lexer */

SKIP : { " " | "\t" | "\n" | "\r" }

TOKEN : { <NOR:               "nor" > }
TOKEN : { <XOR:               "xor" > }
TOKEN : { <VARIABLE:          ["a"-"z"] ( ["a"-"z","0"-"9"] )* > }
TOKEN : { <NOT:               "-" > }
TOKEN : { <AND:               "." > }
TOKEN : { <OR:                "+" > }
TOKEN : { <IFF:               "=" > }
TOKEN : { <IMPLIES:           "=>" > }
TOKEN : { <IMPLIED_BY:        "<=" > }
TOKEN : { <TRUE:              "1" > }
TOKEN : { <FALSE:             "0" > }
TOKEN : { <OPEN:              "(" > }
TOKEN : { <CLOSE:             ")" > }
TOKEN : { <COMMA:             "," > }
TOKEN : { <COMMAND_SEPARATOR: ";" > }

/* Grammar */

/** Root production. */
void Start() : {}
{
  ( Command() )* <EOF>
}

void Command() : {
  BDD expression;
}
{
  expression=AdditiveExpression() <COMMAND_SEPARATOR> { /* TODO: wrap expression in a command pattern */ }
}

BDD AdditiveExpression() : {
  BDD lhs, rhs = null;
}
{
  lhs=MultiplicativeExpression() ( <OR> rhs=AdditiveExpression() )? { return rhs == null ? lhs : lhs.or(rhs); }
}

BDD MultiplicativeExpression() : {
  BDD lhs, rhs = null;
  BDDFactory.BDDOp op = null;
}
{
  lhs=UnaryExpression() ( op=MultiplicativeOperator() rhs=MultiplicativeExpression() )? { return rhs == null ? lhs : lhs.apply(rhs, op); }
}

BDDFactory.BDDOp MultiplicativeOperator() : {}
{
  <AND> { return BDDFactory.and; }
  |
  <IFF> { return BDDFactory.biimp; }
  |
  <IMPLIES> { return BDDFactory.imp; }
  |
  <IMPLIED_BY> { return BDDFactory.invimp; }
}

BDD UnaryExpression() : {
  BDD expression;
}
{
  <NOT> expression=UnaryExpression() { return expression.not(); }
  |
  expression=Term() { return expression; }
}

BDD Term() : {
  BDD          expression;
  NaryFunction f;
  List<BDD>    list;
  Token        token;
}
{
  <TRUE> { return factory.one(); }
  |
  <FALSE> { return factory.zero(); }
  |
  f=Function() list=ParameterList() { return f.eval(list); }
  |
  token=<VARIABLE> { return findVariable(token.toString()); }
  |
  <OPEN> expression=AdditiveExpression() <CLOSE> { return expression; }
}

NaryFunction Function() : {}
{
  <NOR> { return new NorFunction(); }
  |
  <XOR> { return new ExactlyOneFunction(); }
}

List<BDD> ParameterList() : {
  BDD head;
  List<BDD> tail;
}
{
  <OPEN> head=AdditiveExpression() tail=AdditionalParameters() { List list = new ArrayList<BDD>();
                                                                 list.add(head);
                                                                 list.addAll(tail);
                                                                 return list; }
}

List<BDD> AdditionalParameters() : {
  BDD head;
  List<BDD> tail;
}
{
  <COMMA> head=AdditiveExpression() tail=AdditionalParameters() { List<BDD> list = new ArrayList<BDD>();
                                                                  list.add(head);
                                                                  list.addAll(tail);
                                                                  return list; }
  |
  <CLOSE> { return Collections.<BDD>emptyList(); }
}
