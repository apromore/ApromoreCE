<window xmlns:n="http://www.zkoss.org/2005/zk/native" xmlns:w="http://www.zkoss.org/2005/zk/client" 
        xmlns:z="http://www.zkoss.org/2005/zul"
        position="center,center" closable="true" id="stageminingresult">

    <n:div id="myDiagramDiv" style="height: 400px; min-width: 900px"></n:div>
    <button id="stageminingresult_layout" xmlns:w="client" w:onClick="layout();">Relayout</button>
    <button id="stageminingresult_createLogButton">Create Staged Log...</button>
    
    <script type="text/javascript">
        var myDiagram;

        function init() {
            //if (window.goSamples) goSamples();  // init for these samples -- you don't need to call this
            var $ = go.GraphObject.make;  // for conciseness in defining templates

            var yellowgrad = $(go.Brush, "Linear", { 0: "rgb(254, 201, 0)", 1: "rgb(254, 162, 0)" });
            var greengrad = $(go.Brush, "Linear", { 0: "#98FB98", 1: "#9ACD32" });
            var bluegrad = $(go.Brush, "Linear", { 0: "#B0E0E6", 1: "#87CEEB" });
            var redgrad = $(go.Brush, "Linear", { 0: "#C45245", 1: "#871E1B" });
            var whitegrad = $(go.Brush, "Linear", { 0: "#F0F8FF", 1: "#E6E6FA" });

            var bigfont = "bold 13pt Helvetica, Arial, sans-serif";
            var smallfont = "bold 11pt Helvetica, Arial, sans-serif";

            // Common text styling
            function textStyle() {
              return {
                    margin: 6,
                    wrap: go.TextBlock.WrapFit,
                    textAlign: "center",
                    editable: true,
                    font: bigfont
              }
            }

            myDiagram =
              $(go.Diagram, "myDiagramDiv",
                    {
                      // have mouse wheel events zoom in and out instead of scroll up and down
                      "toolManager.mouseWheelBehavior": go.ToolManager.WheelZoom,
                      allowDrop: true,  // support drag-and-drop from the Palette
                      initialAutoScale: go.Diagram.Uniform,
                      "linkingTool.direction": go.LinkingTool.ForwardsOnly,
                      initialContentAlignment: go.Spot.Center,
                      layout: $(go.LayeredDigraphLayout, { isInitial: false, isOngoing: false, layerSpacing: 50 }),
                      "undoManager.isEnabled": true
                    });

            var defaultAdornment =
              $(go.Adornment, "Spot",
                    $(go.Panel, "Auto",
                      $(go.Shape, { fill: null, stroke: "dodgerblue", strokeWidth: 4 }),
                      $(go.Placeholder)),
                    // the button to create a "next" node, at the top-right corner
                    $("Button",
                      { alignment: go.Spot.TopRight,
                            click: addNodeAndLink },  // this function is defined below
                      new go.Binding("visible", "", function(a) { return !a.diagram.isReadOnly; }).ofObject(),
                      $(go.Shape, "PlusLine", { desiredSize: new go.Size(6, 6) })
                    )
              );

            // define the Node template
            myDiagram.nodeTemplate =
              $(go.Node, "Auto",
                    { selectionAdornmentTemplate: defaultAdornment },
                    new go.Binding("location", "loc", go.Point.parse).makeTwoWay(go.Point.stringify),
                    // define the node's outer shape, which will surround the TextBlock
                    $(go.Shape, "Rectangle",
                      { fill: yellowgrad, stroke: "black",
                            portId: "", fromLinkable: true, toLinkable: true, cursor: "pointer",
                            toEndSegmentLength: 50, fromEndSegmentLength: 40 }),
                    $(go.TextBlock, "Page",
                      { margin: 6,
                            font: bigfont,
                            textAlign: "center",
                            editable: true,
                            width: 200,
                            wrap: go.TextBlock.WrapFit},
                      new go.Binding("text", "text").makeTwoWay()));

            // clicking the button of a default node inserts a new node to the right of the selected node,
            // and adds a link to that new node
            function addNodeAndLink(e, obj) {
              var adorn = obj.part;
              if (adorn === null) return;
              e.handled = true;
              var diagram = adorn.diagram;
              diagram.startTransaction("Add State");
              // get the node data for which the user clicked the button
              var fromNode = adorn.adornedPart;
              var fromData = fromNode.data;
              // create a new "State" data object, positioned off to the right of the adorned Node
              var toData = { text: "new" };
              var p = fromNode.location;
              toData.loc = p.x + 200 + " " + p.y;  // the "loc" property is a string, not a Point object
              // add the new node data to the model
              var model = diagram.model;
              model.addNodeData(toData);
              // create a link data from the old node data to the new node data
              var linkdata = {};
              linkdata[model.linkFromKeyProperty] = model.getKeyForNodeData(fromData);
              linkdata[model.linkToKeyProperty] = model.getKeyForNodeData(toData);
              // and add the link data to the model
              model.addLinkData(linkdata);
              // select the new Node
              var newnode = diagram.findNodeForData(toData);
              diagram.select(newnode);
              diagram.commitTransaction("Add State");
            }

            // replace the default Link template in the linkTemplateMap
            myDiagram.linkTemplate =
                $(go.Link,  // the whole link panel
                { curve: go.Link.Bezier, toShortLength: 15, reshapable: true, relinkableFrom: true, relinkableTo: true},
                new go.Binding("points").makeTwoWay(),
                new go.Binding("curviness", "curviness"),
                $(go.Shape,  // the link shape
                        new go.Binding("strokeWidth", "strokeWidth")),
                $(go.Shape,  // the arrowhead
                  { toArrow: "triangle", fill: "#2F4F4F", stroke: null, scale: 2 }),
                $(go.Panel, "Auto",  // this whole Panel is a link label
                    $(go.Shape, "Rectangle", { fill: "yellow", stroke: "gray" }),
                    $(go.TextBlock, { margin: 3 },
                      new go.Binding("text", "text")))
            );
        }

        function layout() {
            myDiagram.layoutDiagram(true);
        }

        function load(json) {
			console.log("json");
            console.log(json);
            myDiagram.model = go.Model.fromJson(json);
            layout();
        }

        zk.afterMount(function() {
            init();
        });

    </script>
</window>