if(!ORYX.Plugins) //useful when oryx plugin is the 1st plugin in the project bein loaded	ORYX.Plugins = new Object();ORYX.Plugins.APROMORELink = ORYX.Plugins.AbstractPlugin.extend({		construct: function() {		arguments.callee.$.construct.apply(this, arguments);				this.facade.offer({			'name'				: ORYX.I18N.APROMORE.saveAs,			'functionality'		: this.saveAsInApromore.bind(this),			'group'				: ORYX.I18N.Save.group,			'icon'				: ORYX.PATH + "images/disk_multi.png",			'description'		: ORYX.I18N.Save.saveAsDesc,			'index'				: 7,			'minShape'			: 0,			'maxShape'			: 0});				this.facade.offer({			'name'				: ORYX.I18N.APROMORE.save,			'functionality'		: this.saveInApromore.bind(this),			'group'				: ORYX.I18N.Save.group,			'icon'				: ORYX.PATH + "images/disk.png",			'description'		: ORYX.I18N.Save.saveDesc,			'index'				: 6,			'minShape'			: 0,			'maxShape'			: 0});		},	/**	 * getter for form contains processVersion and processVersion information.	 * @param {Object} isSave	 */	getSaveForm: function(isSave)	{        
        return new Ext.form.FormPanel({
            baseCls: 'x-plain',
            labelWidth: 50,
            defaultType: 'textfield',
            url: ORYX.CONFIG.EXPORT_TO_APROMORE,
            items: [{
                fieldLabel: 'Process Name',				readOnly:isSave,
                hideLabel: false,
                xtype: 'textfield',
                id: 'APProcessName',				name: 'APProcessName',
                allowBlank: false,
                value: this.customUnescape(this.getParameter(window.location.href, "processName"))
            
            }, {
                fieldLabel: 'Version',                hideLabel: false,
                xtype: 'textfield',
                id: 'APProcessVersion',				name: 'APProcessVersion',
                allowBlank: false,
                value: isSave?this.getNextVersion(this.customUnescape(this.getParameter(window.location.href, "processVersion"))):'0.1'
            
            }, {
                xtype: 'hidden',
                id: 'sessionCode',
                name: 'sessionCode',
                value: this.getParameter(window.location.href, "sessionCode")
            }, {
                xtype: 'hidden',
                id: 'isSave',
                name: 'isSave',
                value: isSave
            
            }, {                xtype: 'hidden',                id: 'data',                name: 'data',                value: this.facade.getSerializedJSON()                        }, {                xtype: 'hidden',                id: 'action',                name: 'action',                value: 'Export'                        }			]
        });
	},	getSaveDialog:function(isSave,form)	{		var dialog= new Ext.Window({ 			autoCreate: true, 			layout: 	'fit',			plain:		true,			bodyStyle: 	'padding:5px;',			title: 		isSave?'Save Process':'Save Process As...', //TODO: i18n it			height: 	150, 			width:		250,			modal:		true,			fixedcenter:true, 			shadow:		true, 			proxyDrag: 	true,			resizable:	true,			items: 		[form],			buttons:[				{//					formBind:true,					text:'Save',                    handler: function()                    {//					alert(this.constructor.name);/TODO: why only manual validation works?					if(document.getElementById('APProcessName').value!=null &&						document.getElementById('APProcessName').value!="" &&						document.getElementById('APProcessVersion').value!=null &&						document.getElementById('APProcessVersion').value!="")					{					var loadMask = new Ext.LoadMask(Ext.getBody(), {msg:'Saving...'});					loadMask.show();                        form.getForm().submit({                            success: function(result, request)                            {															var jsonData = Ext.util.JSON.decode( request.response.responseText);			                var newSessionCode = jsonData.data;							loadMask.hide();							dialog.hide();							window.onbeforeunload = null; //remove confirm 							window.location=window.location.protocol+"//"+ window.location.host+"/oryx/openFromApromore?&sessionCode="								+newSessionCode+"&notationsOnly="+ORYX.Utils.getParamFromUrl("notationsOnly"); //TODO: pass all params with an iterate                            },                            failure: function(result, request)                            {                            	loadMask.hide();									var natije=eval("("+request.response.responseText+")");                            	Ext.Msg.alert("Error", ""+natije.data);//                            	Ext.Msg.alert("Error", ""+result.responseText);                            }                        });                    }					else{Ext.Msg.alert("Error","Fill required fields.");}                    }				},{					text:'Close',					handler:function(){												dialog.hide();										}.bind(this)				}			]		});		return dialog;			},			/**	 * increments the version and returns it back.	 * @param {Object} currentVersion	 */	getNextVersion: function(currentVersion) 	{		var trimmed=this.trimAll(currentVersion);		var nextMinor=trimmed.substring(trimmed.lastIndexOf('.')+1)*1+1;				return  trimmed.substring(0,trimmed.lastIndexOf('.')+1)+nextMinor;	},	/**	 * a replacement for buggy trim function in the javascript	 * @param {Object} sString	 */	trimAll:function (sString)	{		while (sString.substring(0,1) == ' ')		{			sString = sString.substring(1, sString.length);		}				while (sString.substring(sString.length-1, sString.length) == ' ')		{			sString = sString.substring(0,sString.length-1);		}		return sString;	},	/**	 * starting point of the saveAs pluggin 	 */	saveAsInApromore: function() {				if ("true"==ORYX.Utils.getParamFromUrl("notationsOnly")) {				var form=new Ext.form.FormPanel({	            baseCls: 'x-plain',	            labelWidth: 50,	            defaultType: 'textfield',	            url: ORYX.CONFIG.EXPORT_TO_APROMORE,	            items: [{	                fieldLabel: 'Name',					readOnly:false,	                hideLabel: false,	                xtype: 'textfield',	                id: 'APAnnotationName',					name: 'APAnnotationName',	                allowBlank: false,	                value: ''	            	            }, {	                xtype: 'hidden',	                id: 'sessionCode',	                name: 'sessionCode',	                value: this.getParameter(window.location.href, "sessionCode")	            }, {	                xtype: 'hidden',	                id: 'isSave',	                name: 'isSave',	                value: false	            	            }, {	                xtype: 'hidden',	                id: 'data',	                name: 'data',	                value: this.facade.getSerializedJSON()	            	            }, {	                xtype: 'hidden',	                id: 'action',	                name: 'action',	                value: 'Export'	            	            }, {	                xtype: 'hidden',	                id: 'notationsOnly',	                name: 'notationsOnly',	                value: 'true'	            	            }				]	        });			var dialog= new Ext.Window({ 			autoCreate: true, 			layout: 	'fit',			plain:		true,			bodyStyle: 	'padding:5px;',			title: 		'Save New Annotation',			height: 	100, 			width:		220,			modal:		true,			fixedcenter:true, 			shadow:		true, 			proxyDrag: 	true,			resizable:	true,			items: 		[form],			buttons:[				{					text:'Save',                    handler: function()                    {					if(document.getElementById('APAnnotationName').value!=null &&						document.getElementById('APAnnotationName').value!="" )					{					var loadMask = new Ext.LoadMask(Ext.getBody(), {msg:'Saving...'});					loadMask.show();                    form.getForm().submit({                        success: function(result, request)                        {														var jsonData = Ext.util.JSON.decode( request.response.responseText);			                var newSessionCode = jsonData.data;							loadMask.hide();							dialog.hide();//							alert(jsonData.data);							window.onbeforeunload = null; //remove confirm 							window.location=window.location.protocol+"//"+ window.location.host+"/oryx/openFromApromore?&sessionCode="								+newSessionCode+"&notationsOnly="+ORYX.Utils.getParamFromUrl("notationsOnly"); //TODO: pass all params with an iterate	                        },                        failure: function(result, request)                        {                        	loadMask.hide();							var natije=eval("("+request.response.responseText+")");                        	Ext.Msg.alert("Error", ""+natije.data);                        }                    });                    }					else{Ext.Msg.alert("Error","Fill required fields.");}                    }				},{					text:'Close',					handler:function(){												dialog.hide();										}.bind(this)				}			]		});		dialog.on('hide', function(){			dialog.destroy(true);			delete dialog;		});		dialog.show();							}		else {					var json = this.facade.getSerializedJSON();			var form = this.getSaveForm(false);			var dialog = this.getSaveDialog(false, form);						dialog.on('hide', function(){				dialog.destroy(true);				delete dialog;			});			dialog.show();		}	},		/**	 * starting point of the save pluggin	 */	saveInApromore: function(){			if ("true"== ORYX.Utils.getParamFromUrl("notationsOnly")) {			Ext.Ajax.request({				url: ORYX.CONFIG.EXPORT_TO_APROMORE,				method: 'POST',				success: function(request){					//alert("Success");					}.bind(this),				failure: function(result, request) {					Ext.Msg.alert("Error", ""+result.responseText);					},								params: {data: this.facade.getSerializedJSON(),						 action: "Export",						 isSave: true,						 notationsOnly: true,						 sessionCode: this.getParameter(window.location.href, "sessionCode")}			});		}		else {			//var json = this.facade.getSerializedJSON();			var form = this.getSaveForm(true);			var dialog = this.getSaveDialog(true, form)									dialog.on('hide', function(){				dialog.destroy(true);				delete dialog;			});						dialog.show();					}	},	/**	 * gets value of a spesific parameter in the queryString 	 * @param {Object} queryString	 * @param {Object} parameterName	 */	getParameter:function ( queryString, parameterName ) {        // Add "=" to the parameter name (i.e. parameterName=value)        var parameterName = parameterName + "=";        if (queryString.length > 0) {            // Find the beginning of the string            begin = queryString.indexOf(parameterName);            // If the parameter name is not found, skip it, otherwise return the value            if (begin != -1) {                // Add the length (integer) to the beginning                begin += parameterName.length;                // Multiple parameters are separated by the "&" sign                end = queryString.indexOf("&", begin);                if (end == -1) {                    end = queryString.length                }                // Return the string                return this.customUnescape(queryString.substring(begin, end));            }            // Return "null" if no parameter has been found            return "null";        }	},		/**	 * custom unescape function that work with escaped method that comes with java.	 * @param {Object} parameterValue	 */	customUnescape: function( parameterValue ){		return unescape(parameterValue).replace(/\+/g," ");		},		/**	 * main entry of the import function	 * @param {Object} successCallback	 */	/*importFromAPROMORE: function( successCallback ){			var url = ORYX.CONFIG.EXPORT_TO_APROMORE;		var loadMask = new Ext.LoadMask(Ext.getBody(), {msg:ORYX.I18N.BPMN2XPDL.impProgress});		var code=this.getParameter(window.location.href,"sessionCode");		//alert(code);		loadMask.show();				window.setTimeout(function(){				Ext.Ajax.request({				url: url,				method: 'POST',				success: function(request){this.facade.importJSON(request.responseText); loadMask.hide();dialog.hide();}.bind(this),				failure: function() {loadMask.hide(); Ext.Msg.alert("Import failed: "+request.responseText);},								params: {data: code,						 action: "Import"}			});						facade.shapes.each(function(shape) {				var bg = $(shape.getId()+"roundedBgRect");				alert("BG:"+bg);				var bgColor = shape.properties["oryx-color"];				alert("BGCOLOR:"+bgColor);					bg.setAttributeNS(null, "fill", "#ffffff");													}.bind(this));					}.bind(this), 100);	},*/		/**	 * if sesion code is in parameters,  sends a request to the servlet for fetching the model and display it	 */	onLoaded: function()	{//		alert("onload");		var code=this.getParameter(window.location.href,"sessionCode");	if(code!="null" && code!=null)		{				var url = ORYX.CONFIG.EXPORT_TO_APROMORE;		var loadMask = new Ext.LoadMask(Ext.getBody(), {msg:"Loading the process.."});				loadMask.show();				window.setTimeout(function(){				Ext.Ajax.request({				url: url,				method: 'POST',				success: function(request)				{					this.facade.importJSON(request.responseText); loadMask.hide();dialog.hide();					this.facade.getCanvas().update();				}.bind(this),								failure: function() {loadMask.hide(); Ext.Msg.alert("Error","Import failed");},								params: {sessionCode: code,						 action: "Import"}			});			if (this.getParameter(window.location.href, "autolayout") == "true") {				window.setTimeout(function(){					var layouter = new ORYX.Plugins.BpmnLayouter(this.facade);					layouter.layout();				}.bind(this), 800);									}									}.bind(this), 100);			}	}});	