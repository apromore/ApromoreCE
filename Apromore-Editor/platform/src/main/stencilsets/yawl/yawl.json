/**
 * Copyright (c) 2012
 * Felix Mannhardt, felix.mannhardt@smail.wir.h-brs.de 
 * Marcel Bresser
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 * 
 * See: http://www.opensource.org/licenses/mit-license.php
 **/
{
	"title":"YAWL 2.2",
	"namespace":"http://b3mn.org/stencilset/yawl2.2#",
	"description":"YAWL 2.2 workflow",
	"propertyPackages": [
		{
 			"name":"baseAttributes",
 			"properties": [
				{
					"id":"yawlid",
					"type":"String",
					"title":"Internal YAWL ID",
					"value":"",
					"readonly":false,
					"optional":true,
					"length":"100"	
				}, 			
				{
					"id":"name",
					"type":"String",
					"title":"Name",
					"value":"",
					"description":"The descriptive name of the YAWL element.",
					"readonly":false,
					"optional":true,
					"length":"100",
					"wrapLines": true,
					"refToView":"caption"	
				},
				{
					"id":"documentation",
					"type":"Text",
					"title":"Documentation",
					"value":"",
					"description":"",					
					"readonly":false,
					"optional":true,
					"length":"200",
					"wrapLines": true
				}								
 			]
 		},
 		{
 			"name":"baseColor",
 			"properties": [
				{
					"id":"bgcolor",
					"type":"Color",
					"fill":"true",
					"title":"Background Color",
					"value":"#FFFFFF",
					"description":"Background color of the element",
					"readonly":false,
					"optional":true,
					"refToView":"base"					
				}						
 			]
 		},
        {
 			"name":"baseSpecification",
 			"properties": [
				{
					"id":"specid",
					"type":"String",
					"title":"Specification ID",
					"value":"",
					"readonly":false,
					"optional":true,
					"length":"100"	
				}, 			
				{
					"id":"specname",
					"type":"String",
					"title":"Specification Name",
					"value":"",
					"description":"The descriptive name of the YAWL element.",
					"readonly":false,
					"optional":true,
					"length":"100",
					"wrapLines": true,
					"refToView":"caption"	
				}, 			
				{
					"id":"spectitle",
					"type":"String",
					"title":"Specification Title",
					"value":"",
					"description":"",
					"readonly":false,
					"optional":true,									
				},
				{
					"id":"speccreators",
					"type":"Complex",
					"title":"Specification Creators",
					"value":"",
					"description":"This holds the name of the creators of the YAWL specification.",
					"optional":true,
					"complexItems": [
						{
							"id":"name",
							"name":"Name of Creator",
							"type":"String",
							"value":"",
							"width":200,
							"optional":false
						}
					]					
				},
				{
					"id":"specsubject",
					"type":"Complex",
					"title":"Specification Subject",
					"value":"",
					"description":"",
					"optional":true,
					"complexItems": [
						{
							"id":"name",
							"name":"Name of Subject",
							"type":"String",
							"value":"",
							"width":200,
							"optional":false
						}
					]					
				},
				{
					"id":"specdescription",
					"type":"String",
					"title":"Specification Description",
					"value":"",
					"description":"",
					"readonly":false,
					"optional":true,
					"length":"",
					"wrapLines":true
				},
				{
					"id":"speccontributor",
					"type":"Complex",
					"title":"Specification Contributor",
					"value":"",
					"description":"",
					"optional":true,
					"complexItems": [
						{
							"id":"name",
							"name":"Name of Contributor",
							"type":"String",
							"value":"",
							"width":200,
							"optional":false
						}
					]					
				},	
				{
					"id":"speccoverage",
					"type":"String",
					"title":"Specification Coverage",
					"value":"",
					"description":"",
					"optional":true,
										
				},							
				{
					"id":"specvalidfrom",
					"type":"Date",
					"title":"Specification Valid From",
					"value":"",
					"description":"",
					"readonly":false,
					"optional":true,
					"dateFormat":"m/d/y"
				},				
				{
					"id":"specvalidto",
					"type":"Date",
					"title":"Specification Valid To",
					"value":"",
					"description":"",
					"readonly":false,
					"optional":true,
					"dateFormat":"m/d/y"
				},
				{
					"id":"speccreated",
					"type":"Date",
					"title":"Specification Created",
					"value":"",
					"description":"",
					"readonly":false,
					"optional":true,
					"dateFormat":"m/d/y"
				},								
				{
					"id":"specversion",
					"type":"String",
					"title":"Specification Version",
					"value":"",
					"description":"This defines the Version number of the YAWL specification. Should be exactly in the Format (XX.YY)",
					"readonly":false,
					"optional":true,
					"length":"10"
				},
				{
					"id":"specstatus",
					"type":"String",
					"title":"Specification Status",
					"value":"",
					"description":"",
					"readonly":false,
					"optional":true
				},
				{
					"id":"specpersistent",
					"type":"Boolean",
					"title":"Specification Persistent",
					"value":"",
					"description":"",
					"readonly":false,
					"optional":true
				},								
				{
					"id":"specuri",
					"type":"String",
					"title":"Specification URI",
					"value":"",
					"description":"",
					"readonly":false,
					"optional":true
				},				
				{
					"id":"specdatatypedefinitions",
					"type":"Text",
					"title":"Specification Data Type Definitions",
					"value":"<xs:schema xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" />",
					"description":"XSD Schema document describing the data types that may be used in this YAWL specification.",
					"readonly":false,
					"optional":false,
					"wrapLines":true
				}										
 			]
 		},
		{
 			"name":"baseNet",
 			"properties": [
				{
					"id":"isrootnet",
					"type":"Boolean",
					"title":"Is Root Net",
					"value":"true",
					"description":"Whether this net is the starting net of the YAWL specification",
					"readonly":false,
					"optional":false
				},
				{
					"id":"externaldatagateway",
					"type":"String",
					"title":"External Data Gateway",
					"value":"",
					"description":"Name of the External Data Gateway for this net",
					"readonly":false,
					"optional":true
				}												
 			]
 		},
 		{
 			"name":"baseDecomposition",
 		    "properties": [
				{
					"id":"decompositionid",
					"type":"String",
					"title":"Decomposition ID",
					"value":"",
					"description":"ID of the underlying decomposition",
					"readonly":false,
					"optional":true
				},
				{
					"id":"decompositionname",
					"type":"String",
					"title":"Decomposition Name",
					"value":"",
					"description":"Name of the underlying decomposition",
					"readonly":false,
					"optional":true
				},		
				 				{	
					"id":"decompositionexternalinteraction",
					"type":"Choice",
					"title":"External Interaction",
					"value":"",
					"description":"",
					"readonly":false,
					"optional":true,
					"items": [
						{
							"title":"Manual",
							"value":"manual",
						},
						{
							"title":"Automatic",
							"value":"automated",
							"refToView":"automatic"
						}
					]					
				},					
				{
					"id":"decompositioncodelet",
					"type":"String",
					"title":"Codelet",
					"value":"",
					"description":"Name of Codelet to execute",
					"readonly":false,
					"optional":true
				},
				{	
					"id":"decompositionvariables",
					"type":"Complex",
					"title":"Variables",
					"value":"",
					"description":"Decomposition Variables",
					"readonly":false,
					"optional":true,
					"complexItems": [
						{
							"id":"name",
							"name":"Name",
							"type":"String",
							"value":"",
							"width":100,
							"optional":false 
						},
						{
							"id":"type",
							"name":"Type",
							"type":"String",
							"value":"",
							"width":100,
							"optional":false 
						},
						{
							"id":"usage",
							"name":"Usage",
							"type":"Choice",
							"value":"input",
							"width":50,
							"optional":false,
							"items": [
								{
									"title":"Input only",
									"value":"input",
								},					
								{
									"title":"Output only",
									"value":"output",
								},
								{
									"title":"Input & Output",
									"value":"inputandoutput",
								}
							]														 
						},
						{
							"id":"initialvalue",
							"name":"Initial Value",
							"type":"String",
							"value":"",
							"width":100,
							"optional":true 
						},
						{
							"id":"namespace",
							"name":"Namespace",
							"type":"String",
							"value":"http://www.w3.org/2001/XMLSchema",
							"width":50,
							"optional":false 
						},
						{
							"id":"ismandatory",
							"name":"Is Mandatory",
							"type":"Boolean",
							"value":"true",
							"width":30,
							"optional":false 
						},	
						{
							"id":"attributes",
							"name":"Attributes",
							"type":"String",
							"value":"",
							"width":50,
							"optional":true 
						},	
						{
							"id":"logpredicate",
							"name":"Log Predicate",
							"type":"String",
							"value":"",
							"width":50,
							"optional":true 
						}
					]
				},
				{
					"id":"decompositionlogpredicate",
					"type":"Text",
					"title":"Log Predicate",
					"value":"",
					"description":"Log Predicate of Decomposition",
					"readonly":false,
					"optional":true					
				}				 
				
			]			 		
 		},		
 		{
 		    "name":"baseResourcing",
 		    "properties": [
		       	{
					"id":"startinitiator",
					"type":"Choice",
					"title":"Start Initiator",
					"value":"user",
					"description":"Whether the task will be automatically started by the system or manually by the user.",
					"optional":false,
					"items": [
						{
							"title":"System",
							"value":"system"
						},
						{
							"title":"User",
							"value":"user"
						}
					]
				},
				{	
					"id":"startinteraction",
					"type":"Text",
					"title":"Start Interaction",
					"value":"",
					"description":"YAWL resourcing XML. Please take care editing this, it may break export functionality!",
					"readonly":false,
					"optional":true,
					"wrapLines":true
				}, 		    
				{
					"id":"allocateinitiator",
					"type":"Choice",
					"title":"Allocate Initiator",
					"value":"user",
					"optional":false,
					"items": [
						{
							"title":"System",
							"value":"system"
						},
						{
							"title":"User",
							"value":"user"
						}
					]
				},
				{	
					"id":"allocateinteraction",
					"type":"Text",
					"title":"Allocate Interaction",
					"value":"",
					"description":"YAWL resourcing XML. Please take care editing this, it may break export functionality!",
					"readonly":false,
					"optional":true,
					"wrapLines":true					
				},
				{
					"id":"offerinitiator",
					"type":"Choice",
					"title":"Offer Initiator",
					"value":"user",
					"optional":false,
					"items": [
						{
							"title":"System",
							"value":"system"
						},
						{
							"title":"User",
							"value":"user"
						}
					]
				},				
				{	
					"id":"offerinteraction",
					"type":"Text",
					"title":"Offer Interaction",
					"value":"",
					"description":"YAWL resourcing XML. Please take care editing this, it may break export functionality!",
					"readonly":false,
					"optional":true,
					"wrapLines":true
				},
				{	
					"id":"privileges",
					"type":"Text",
					"title":"Privileges",
					"value":"",
					"description":"YAWL resourcing XML. Please take care editing this, it may break export functionality!",
					"readonly":false,
					"optional":true,
					"wrapLines":true
				}					    	
 		    ]	
 		}, 		
 		{
 		    "name":"baseTasks",
 		    "properties": [
				{	
					"id":"cancelationset",
					"type":"Complex",
					"title":"Cancellation Set",
					"value":"",
					"description":"Identifiers of the Tasks/Flows that gets canceled, when this task is executed. Flows can be addressed using an Oryx-Only identifier like this: priorTaksID|-|nextTaskID",
					"readonly":false,
					"optional":true,
					"complexItems": [
						{
							"id":"element",
							"name":"Task or Flow to Cancel",
							"type":"String",
							"value":"",
							"width":200,
							"optional":false 
						}
					]
				},
				{	
					"id":"flowsinto",
					"type":"Complex",
					"title":"Flow detail",
					"value":"",
					"description":"Information about the flow of a SPLIT decorator.",
					"readonly":false,
					"optional":true,
					"complexItems": [
						{
							"id":"task",
							"name":"Target Task",
							"type":"String",
							"value":"",
							"width":100,
							"optional":false 
						},
						{
							"id":"predicate",
							"name":"Predicate",
							"type":"String",
							"value":"",
							"width":200,
							"optional":false 
						},
						{
							"id":"isdefault",
							"name":"Is Default",
							"type":"Boolean",
							"value":"",
							"width":50,
							"optional":false 
						},
						{
							"id":"ordering",
							"name":"Order",
							"type":"String",
							"value":"",
							"width":50,
							"optional":true 
						}						
					]
				},
				{
					"id":"join",
					"type":"Choice",
					"title":"Join",
					"value":"None",
					"optional":false,
					"items": [
						{
							"title":"None",
							"value":"none",
							"refToView":"none"
						},
						{
							"title":"AND-Join-LEFT",
							"value":"andL",
							"refToView":"andjoinL"
						},
						{
							"title":"OR-Join-LEFT",
							"value":"orL",
							"refToView":"orjoinL"
						},
						{
							"title":"XOR-Join-LEFT",
							"value":"xorL",
							"refToView":"xorjoinL"
						},
						{
							"title":"AND-Join-RIGHT",
							"value":"andR",
							"refToView":"andjoinR"
						},
						{
							"title":"OR-Join-RIGHT",
							"value":"orR",
							"refToView":"orjoinR"
						},
						{
							"title":"XOR-Join-RIGHT",
							"value":"xorR",
							"refToView":"xorjoinR"
						},
						{
							"title":"AND-Join-TOP",
							"value":"andT",
							"refToView":"andjoinT"
						},
						{
							"title":"OR-Join-TOP",
							"value":"orT",
							"refToView":"orjoinT"
						},
						{
							"title":"XOR-Join-TOP",
							"value":"xorT",
							"refToView":"xorjoinT"
						},
						{
							"title":"AND-Join-BOTTOM",
							"value":"andB",
							"refToView":"andjoinB"
						},
						{
							"title":"OR-Join-BOTTOM",
							"value":"orB",
							"refToView":"orjoinB"
						},
						{
							"title":"XOR-Join-BOTTOM",
							"value":"xorB",
							"refToView":"xorjoinB"
						},
					]
				},
				{
					"id":"split",
					"type":"Choice",
					"title":"Split",
					"value":"None",
					"optional":false,
					"items": [
						{
							"title":"None",
							"value":"none",
							"refToView":"none"
						},
                        {
                            "title":"AND-Split-RIGHT",
                            "value":"andR",
                            "refToView":"andsplitR"
                        },
                        {
                            "title":"OR-Split-RIGHT",
                            "value":"orR",
                            "refToView":"orsplitR"
                        },
                        {
                            "title":"XOR-Split-RIGHT",
                            "value":"xorR",
                            "refToView":"xorsplitR"
                        },
						{
							"title":"AND-Split-LEFT",
							"value":"andL",
							"refToView":"andsplitL"
						},
						{
							"title":"OR-Split-LEFT",
							"value":"orL",
							"refToView":"orsplitL"
						},
						{
							"title":"XOR-Split-LEFT",
							"value":"xorL",
							"refToView":"xorsplitL"
						},
						{
							"title":"AND-Split-TOP",
							"value":"andT",
							"refToView":"andsplitT"
						},
						{
							"title":"OR-Split-TOP",
							"value":"orT",
							"refToView":"orsplitT"
						},
						{
							"title":"XOR-Split-TOP",
							"value":"xorT",
							"refToView":"xorsplitT"
						},
						{
							"title":"AND-Split-BOTTOM",
							"value":"andB",
							"refToView":"andsplitB"
						},
						{
							"title":"OR-Split-BOTTOM",
							"value":"orB",
							"refToView":"orsplitB"
						},
						{
							"title":"XOR-Split-BOTTOM",
							"value":"xorB",
							"refToView":"xorsplitB"
						},
					]
				},
				{	
					"id":"inputparameters",
					"type":"Complex",
					"title":"Input mappings",
					"value":"",
					"description":"Input parameter mappings that are evaluated when the task is started.",
					"readonly":false,
					"optional":true,
					"complexItems": [
						{
							"id":"taskvariable",
							"name":"Task Variable",
							"type":"String",
							"value":"",
							"width":100,
							"optional":false 
						},
						{
							"id":"expression",
							"name":"Expression",
							"type":"String",
							"value":"",
							"width":200,
							"optional":false 
						}
					]
				},
				{	
					"id":"outputparameters",
					"type":"Complex",
					"title":"Output mappings",
					"value":"",
					"description":"Output parameter mappings that are evaluated when the task is completed.",
					"readonly":false,
					"optional":true,
					"complexItems": [
						{
							"id":"taskvariable",
							"name":"Task Variable",
							"type":"String",
							"value":"",
							"width":100,
							"optional":false 
						},
						{
							"id":"expression",
							"name":"Expression",
							"type":"String",
							"value":"",
							"width":200,
							"optional":false 
						}
					]
				},
				{	
					"id":"configuration",
					"type":"Text",
					"title":"Process Configuration",
					"value":"",
					"description":"YAWL process configuration XML. Please take care editing this, it may break functionality!",
					"readonly":false,
					"optional":true,
					"wrapLines":true
				}																				
			]
 		},
 		{
 			"name":"baseAtomicTasks",
 			"properties": [
				{	
					"id":"customform",
					"type":"String",
					"title":"Custom Form URL",
					"value":"",
					"description":"URL of a custom form handling this task.",
					"readonly":false,
					"optional":true,
					"wrapLines":false
				},
				{
					"id":"icon",
					"type":"Choice",
					"title":"Icon",
					"value":"None",
					"optional":false,
					"items": [
						{
							"title":"None",
							"value":"none",
						},
						{
							"title":"Manual",
							"value":"Manual",
							"refToView":"iconmanual"
						},
						{
							"title":"Automatic",
							"value":"Automatic",
							"refToView":"iconautomatic"
						},
						{
							"title":"Automatic One",
							"value":"AutomaticOne",
							"refToView":"iconautomaticone"
						},
						{
							"title":"Automatic Two",
							"value":"AutomaticTwo",
							"refToView":"iconautomatictwo"
						},
						{
							"title":"Group",
							"value":"Group",
							"refToView":"icongroup"
						},
						{
							"title":"Inspect",
							"value":"inspect",
							"refToView":"iconinspect"
						},
						{
							"title":"Pair",
							"value":"Pair",
							"refToView":"iconpair"
						},
						{
							"title":"Print",
							"value":"Print",
							"refToView":"iconprint"
						},
						{
							"title":"Validate",
							"value":"Validate",
							"refToView":"iconvalidate"
						},
						{
							"title":"File",
							"value":"File",
							"refToView":"iconfile"
						},
						{
							"title":"Black PDA",
							"value":"BlackPDA",
							"refToView":"iconblackpda"
						},
						{
							"title":"Timer",
							"value":"Timer",
							"refToView":"icontimer"
						},
						{
							"title":"Schedule",
							"value":"Schedule",
							"refToView":"iconschedule"
						},
						{
							"title":"Question One",
							"value":"QuestionOne",
							"refToView":"iconquestionone"
						},
						{
							"title":"Question Two",
							"value":"QuestionTwo",
							"refToView":"iconquestiontwo"
						},
						{
							"title":"Plugin",
							"value":"Plugin",
							"refToView":"iconplugin"
						},
						{
							"title":"Exception",
							"value":"Exception",
							"refToView":"iconexception"
						},
						{
							"title":"Dangerous",
							"value":"Dangerous",
							"refToView":"icondangerous"
						},
						{
							"title":"Broken Icon",
							"value":"BrokenIcon",
							"refToView":"iconbrokenicon"
						},
						{
							"title":"Routing Task",
							"value":"RoutingTask",
							"refToView":"iconroutingtask"
						}
					]
				}													 			
 			]
 		}, 	 		
		{
 			"name":"baseCompositeTasks",
 			"properties": [		
				{
					"id":"decompositionlink",
					"type":"DiagramLink",
					"title":"Unfolds to net (link)",
					"value":"",
					"description":"URL of the Subnet in Oryx Backend (Transient attribute only visible in Signavio)",
					"readonly":false,
					"optional":true,
					"refToView":"decompositionlink"											
				} 			
 			]
 		},
		{
 			"name":"baseMultipleInstances",
 			"properties": [	
				{
					"id":"minimum",
					"type":"Integer",
					"title":"Minimum",
					"value":"",
					"description":"",
					"readonly":false,
					"optional":false											
				},
				{
					"id":"maximum",
					"type":"Integer",
					"title":"Maximum",
					"value":"",
					"description":"",
					"readonly":false,
					"optional":false											
				},
				{
					"id":"threshold",
					"type":"Integer",
					"title":"Threshold",
					"value":"",
					"description":"",
					"readonly":false,
					"optional":false											
				},
				{
					"id":"creationmode",
					"type":"Choice",
					"title":"Creation Mode",
					"value":"static",
					"description":"",
					"readonly":false,
					"optional":false,
					"items": [
								{
									"title":"Static",
									"value":"static"
								},					
								{
									"title":"Dynamic",
									"value":"dynamic"
								}
							]																
				},
				{
					"id":"miinputexpression",
					"type":"Text",
					"title":"Accessor Query",
					"value":"",
					"description":"",
					"readonly":false,
					"optional":false											
				},		
				{
					"id":"miinputsplittingexpression",
					"type":"Text",
					"title":"Splitter Query",
					"value":"",
					"description":"",
					"readonly":false,
					"optional":false											
				},
				{
					"id":"miinputformalinputparam",
					"type":"String",
					"title":"Multiple Instance Variable",
					"value":"",
					"description":"",
					"readonly":false,
					"optional":false											
				},	
				{
					"id":"mioutputformaloutputexpression",
					"type":"Text",
					"title":"Instance Query",
					"value":"",
					"description":"",
					"readonly":false,
					"optional":false											
				},		
				{
					"id":"mioutputoutputjoiningexpression",
					"type":"Text",
					"title":"Aggregate Query",
					"value":"",
					"description":"",
					"readonly":false,
					"optional":false											
				},
				{
					"id":"mioutputresultappliedtolocalvariable",
					"type":"String",
					"title":"Result Net Variable",
					"value":"",
					"description":"",
					"readonly":false,
					"optional":false											
				}										
 			]
 		} 		
	],
 	"stencils" : [
  		{
			"type": "node",
			"id":"Diagram",
			"title":"Diagram",
			"groups":["Nets"],
			"description":"The YAWL Specification is represented by a Diagram.",
			"view":"node.diagram.svg",
			"icon":"node.diagram.png",
			"mayBeRoot": true,
			"roles": [
			],
			"propertyPackages" :[
				"baseAttributes",
				"baseSpecification",
				"baseColor",
				"baseNet",
				"baseDecomposition"				
			],
			"properties": [
			]
		},	
 		{
			"id":"AtomicTask",
			"type": "node",
			"title":"Atomic Task",
			"groups":["Tasks"],
			"description":"An simple atomic task.",
			"view":"tasks/node.task.atomic.svg",
			"icon":"tasks/node.task.atomic.png",
			"roles": [
				"task"
			],
			"propertyPackages":[
				"baseAttributes",
				"baseTasks",
				"baseAtomicTasks",
				"baseColor",
				"baseResourcing",
				"baseDecomposition"		
			],
			"properties":[	
				{	
					"id":"timer",
					"type":"Text",
					"title":"Timer",
					"value":"",
					"description":"YAWL timer configuration XML. Please take care editing this, it may break functionality!",
					"readonly":false,
					"optional":true,
					"wrapLines":true
				}						
			]			
		}, 
		{
			"id":"AtomicMultipleTask",
			"type": "node",
			"title":"Atomic Multiple Task",
			"groups":["Tasks"],
			"description":"An multiple atomic task.",
			"view":"tasks/node.task.atomic.multiple.svg",
			"icon":"tasks/node.task.atomic.multiple.png",
			"roles": [
				"task"
			],
			"propertyPackages":[
				"baseAttributes",
				"baseTasks",
				"baseAtomicTasks",
				"baseMultipleInstances",
				"baseColor",
				"baseResourcing",
				"baseDecomposition"
			]
		},
 		{
			"id":"Condition",
			"type": "node",			
			"title":"Condition",
			"groups":["Conditions"],
			"description":"A condition",
			"view":"conditions/node.condition.svg",
			"icon":"conditions/node.condition.png",
			"roles": [
				"condition"
			],
			"propertyPackages":[
				"baseAttributes",
				"baseColor"
			],						
			"properties": [
			]			
		},
		{
			"id":"CompositeTask",
			"type": "node",
			"title":"Composite Task",
			"groups":["Tasks"],
			"description":"An simple composite task.",
			"view":"tasks/node.task.composite.svg",
			"icon":"tasks/node.task.composite.png",
			"roles": [
				"task"
			],
			"propertyPackages" :[
				"baseAttributes",
				"baseTasks",
				"baseCompositeTasks",
				"baseColor",
				"baseResourcing",
				"baseDecomposition"
			],
			"properties": [
							
			]
		},	
		{
			"id":"CompositeMultipleTask",
			"type": "node",
			"title":"Composite Multiple Task",
			"groups":["Tasks"],
			"description":"An multiple composite task.",
			"view":"tasks/node.task.composite.multiple.instances.svg",
			"icon":"tasks/node.task.composite.multiple.instances.png",
			"roles": [
				"task"
			],
			"propertyPackages" :[
				"baseAttributes",
				"baseTasks",
				"baseCompositeTasks",
				"baseMultipleInstances",
				"baseColor",
				"baseResourcing",
				"baseDecomposition"
			]
		},
		{
			"type": "node",
			"id":"InputCondition",
			"title":"Input condition",
			"groups":["Conditions"],
			"description":"Input condition",
			"view":"conditions/node.condition.input.svg",
			"icon":"conditions/node.condition.input.png",
			"roles": [
				"InputCondition"
			],
			"propertyPackages" :[
				"baseAttributes"
			],									
			"properties": [
			]
		},
		{
			"type": "node",
			"id":"OutputCondition",
			"title":"Output condition",
			"groups":["Conditions"],
			"description":"Output condition",
			"view":"conditions/node.condition.output.svg",
			"icon":"conditions/node.condition.output.png",
			"roles": [
				"OutputCondition"
			],
			"propertyPackages" :[
				"baseAttributes"
			],									
			"properties": [
			]
		},		
		{
			"type": "edge",
			"id":"Flow",
			"title":"Flow",
			"description":"",
			"groups":["Connections"],
			"view":"connection/edge.flow.svg",
			"icon":"connection/edge.flow.png",
			"roles": [
				"flow"
			],
			"propertyPackages" :[
				"baseAttributes"
			],									
			"properties": [		
				{	
					"id":"linestyle",
					"type":"Choice",
					"title":"Line style",
					"value":"11",
					"optional":true,
					"items": [
						{
							"title":"Orthogonal",
							"value":"11"
						},
						{
							"title":"Bezier",
							"value":"12"
						},
						{
							"title":"Spline",
							"value":"13"
						}
					]
				}	
			]
		}
	],
	"rules": {
		"connectionRules": [
			{
				"role":"flow",
				"connects": [
					{
						"from":"condition",
						"to":["task"]
					},
					{
						"from":"task",
						"to":["task", "condition", "OutputCondition"]
					},
					{
						"from":"InputCondition",
						"to":["task"]
					}
				]
			}	
		],
		"cardinalityRules": [	
			{
				"role":"task",
				maximumOccurrence: undefined,
				outgoingEdges: [
					{ 
						"role": "flow",
						maximum: undefined
					}
				],
				incomingEdges: [
					{ 
						"role": "flow",
						maximum: undefined
					}
				]
			},
			{
				"role":"condition",
				maximumOccurrence: undefined,
				outgoingEdges: [
				],
				incomingEdges: [				
				]
			},
			{
				"role":"InputCondition",
				maximumOccurrence: 1,
				outgoingEdges: [				
				],
				incomingEdges: [
					{ 
						"role": "flow",
						maximum: 0
					}
				]				
			},
			{
				"role":"OutputCondition",
				maximumOccurrence: 1,
				outgoingEdges: [				
					{ 
						"role": "flow",
						maximum: 0
					}
				],
				incomingEdges: [
				]				
			}						
		],		
		"containmentRules": [
			{
				"role":"Diagram",
				"contains": [
					"InputCondition",
					"OutputCondition",
					"condition",
					"task",
					"flows"
				]
			}		
		],
		"morphingRules": [		
			{
				"role": "task",
				"baseMorphs": ["AtomicTask"],
				"preserveBounds" : true
			},
			{
				"role": "condition",
				"baseMorphs": ["Condition"],
				"preserveBounds" : true
			},
			{
				"role": "flow",
				"baseMorphs": ["Flow"],
				"preserveBounds" : true
			},
		],
	    canConnect: function(args) {
	    	    
	    	var canConnect = false;
	    	var targetShape = args.targetShape;
	    	var sourceShape = args.sourceShape;
	    	var edgeShape = args.edgeShape;
	    	
	    	// If there is already an edgeShape connected to Source or Target ignore it.
    		var outgoingCount = (targetShape && edgeShape && (edgeShape.getOutgoingShapes()[0] == targetShape)) ? 1 : 0;
    		var incomingCount = (sourceShape && edgeShape && (edgeShape.getIncomingShapes()[0] == sourceShape)) ? 1 : 0;
    		    		    	
			if (targetShape) {			
				if (args.targetStencil._jsonStencil.groups[0] == "Tasks") {
					if (targetShape.getIncomingShapes().length <= outgoingCount) {
						canConnect =  true;
					} else if (targetShape.properties['oryx-join'] != "None") {
						canConnect = true;
					} else {
						return false;					
					}
				} else {
					// Is Condition any number of Flows is allowed
					canConnect = true;
				}			
			} 
			if (sourceShape) {			
				if (args.sourceStencil._jsonStencil.groups[0] == "Tasks") {
					if (sourceShape.getOutgoingShapes().length <= incomingCount) {
						canConnect = true;
					} else if (sourceShape.properties['oryx-split'] != "None") {
						canConnect = true;
					} else {
						return false;					
					}
				} else {
					// Is Condition any number of Flows is allowed
					canConnect = true;
				}							
			}		
	    	return canConnect;
		}		
	}
}