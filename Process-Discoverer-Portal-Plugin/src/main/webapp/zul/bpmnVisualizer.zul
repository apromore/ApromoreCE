<?component name="menuitem" extends="menuitem" autocheck="true" checkmark="true" ?>
<!--
 ~ Copyright Â© 2019 The University of Melbourne.
 ~
 ~ This file is part of "Apromore".
 ~
 ~ "Apromore" is free software; you can redistribute it and/or modify
 ~ it under the terms of the GNU Lesser General Public License as
 ~ published by the Free Software Foundation; either version 3 of the
 ~ License, or (at your option) any later version.
 ~
 ~ "Apromore" is distributed in the hope that it will be useful, but
 ~ WITHOUT ANY WARRANTY; without even the implied warranty
 ~ of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 ~ See the GNU Lesser General Public License for more details.
 ~
 ~ You should have received a copy of the GNU Lesser General Public
 ~ License along with this program.
 ~ If not, see <http://www.gnu.org/licenses/lgpl-3.0.html>.
 -->

<window id="win" width="100%" height="100%" sizable="true" maximizable="true" closable="true" position="center" contentStyle="overflow:auto">
    <caption sclass="mainCaption">
        <a href="https://apromore.org/documentation/features/discover-process-map" target="_blank" sclass="captionButtons">
            <button label="Help" image="img/Help-16x16.png" style="float: right;" height="25px"></button>
        </a>
    </caption>


    <style>
        .mainCaption {
            display: flex;
        }

        .mainCaption .z-caption-content {
            display: flex; flex-grow: 1;
        }

        .mainCaption .z-caption-content > .captionButtons {
            display: inline-block;
            flex-grow: 1;
            text-align: right;
            margin-right: 1px;
        }

        .captionButton {
            font-size: 18px;
            margin: 0px 0px 0px -1px;
            padding: 2px 6px;
            border: 1px solid #cfcfcf;
            color: #636363;
        }
    </style>
    <vbox>
        <grid>
            <columns>
                <column width="50%"/>
                <column width="50%"/>
            </columns>
            <rows>
                <row align="center">
                    <combobutton id="layout" label="Layout" onClick='Clients.evalJavaScript("layout()")'>
                        <menupopup>
                            <menuitem id="layout_breadthfirst" onClick='Clients.evalJavaScript("layout_breadthfirst()")' label="Breadth-First" onCheck='layout_breadthfirst.setChecked(false)'/>
                            <menuitem id="layout_cola" onClick='Clients.evalJavaScript("layout_cola()")' label="Cola" onCheck='layout_cola.setChecked(false)'/>
                            <menuitem id="layout_cose" onClick='Clients.evalJavaScript("layout_cose()")' label="Cose" onCheck='layout_cose.setChecked(false)'/>
                            <menuitem id="layout_dagre_lr" onClick='Clients.evalJavaScript("layout_dagre_LR()")' label="Dagre Left-Right" onCheck='layout_dagre_lr.setChecked(false)'/>
                            <menuitem id="layout_dagre_tb" onClick='Clients.evalJavaScript("layout_dagre_TB()")' label="Dagre Top-Bottom" onCheck='layout_dagre_tb.setChecked(false)'/>
                            <menuitem id="layout_klay_lr" onClick='Clients.evalJavaScript("layout_klay_LR()")' label="Klay Left-Right" onCheck='layout_klay_lr.setChecked(false)'/>
                            <menuitem id="layout_klay_tb" onClick='Clients.evalJavaScript("layout_klay_TB()")' label="Klay Top-Bottom" onCheck='layout_klay_tb.setChecked(false)'/>
                        </menupopup>
                    </combobutton>
                    <combobutton id="export" label="Export">
                        <menupopup>
                            <menuitem id="exportBPMN" label="Export BPMN" onCheck='exportBPMN.setChecked(false)'/>
                            <menuitem id="downloadPDF" label="Export map as PDF" onCheck='downloadPDF.setChecked(false)'/>
                            <menuitem id="downloadPNG" label="Export map as PNG" onCheck='downloadPNG.setChecked(false)'/>
                        </menupopup>
                    </combobutton>
                </row>
            </rows>
        </grid>
        <n:div id="cy" xmlns:n="native" style="height:80vh; width:100vh" />
        <script src="https://cdnjs.cloudflare.com/ajax/libs/svg.js/2.6.5/svg.min.js"></script>
        <script type="text/javascript">
            <![CDATA[

            var layout_model = 4;

            var ctrlIsPressed = false;
            var shiftIsPressed = false;

            $(document).keydown(function(event){
                if(event.which=="17")
                    ctrlIsPressed = true;
            });
            $(document).keydown(function(event){
                if(event.which=="18")
                    shiftIsPressed = true;
            });

            $(document).keyup(function(){
                ctrlIsPressed = false;
                shiftIsPressed = false;
            });

            function init() {

                var cy = window.cy = cytoscape({
                    container: document.getElementById('cy'),
                    layout: {name: 'dagre', padding: 10},
                    zoom: 1,
                    minZoom: 1e-50,
                    maxZoom: 1e50,
                    zoomingEnabled: true,
                    userZoomingEnabled: true,
                    panningEnabled: true,
                    userPanningEnabled: true,
                    wheelSensitivity: 0.1,

                    style: [
						{
							selector: 'node',
							style: {
                                'background-color' : 'data(color)',
                                'border-color' : 'black',
                                'border-width' : 'data(borderwidth)',
                                'color' : 'data(textcolor)',
                                'content' : 'data(name)',
                                'font-size' : 'data(textsize)',
                                'height' : 'data(height)',
                                'padding' : 5,
								'shape' : 'data(shape)',
                                'text-border-width' : 10,
                                'text-max-width' : 'data(textwidth)',
                                'text-valign' : 'center',
                                'text-wrap' : 'wrap',
                                'width' : 'data(width)',
							}
						},

						{
							selector: ':selected',
							style: {
								'border-width': 4,
                                'border-color': '#333'
							}
						},


						{
							selector: 'edge',
							style: {
                                'color' : 'data(color)',
								'curve-style' : 'bezier',
                                'edge-text-rotation' : 0,
                                'font-size' : 11,
                                'label' : 'data(label)',
                                'line-color' : 'data(color)',
                                'line-style' : 'data(style)',
                                'loop-sweep' : 181,
                                'loop-direction' : -41,
                                'opacity' : 1,
                                'source-arrow-color' : 'data(color)',
                                'target-arrow-color' : 'data(color)',
                                'target-arrow-shape' : 'triangle',
                                'text-background-color' : '#ffffff',
                                'text-background-opacity' : 1,
                                'text-background-padding' : 5,
                                'text-background-shape' : 'roundrectangle',
                                'width' : 'mapData(strength, 0, 100, 1, 6)',
							}
						},

						{
						    selector: 'edge.questionable',
						    style: {
                                'line-style': 'dotted',
                                'target-arrow-shape': 'diamond'
                            }
                        },

                        {
						    selector: '.faded',
						    style: {
                                'opacity': 0.25,
                                'text-opacity': 0
                            }
                        }
					],

                    elements: {
                        nodes: [],
                        edges: []
                    }
                });

                cy.on('cxttap', 'edge', function(evt){
                    removeEdge(evt);
                });
                cy.on('cxttap', 'node', function(evt){
                    removeNode(evt);
                });
            }

            function reset() {
                cy.elements().remove();
            }

            function load(json) {
                cy.add($.parseJSON(json));
                layout();
            }

            function horizontal() {
                cy.style().selector('edge').style({
                    'curve-style' : 'bezier',
                    'opacity' : 1,
                    'width' : 'mapData(strength, 0, 100, 1, 6)',
                    'target-arrow-shape' : 'triangle',
                    'color' : 'data(color)',
                    'line-color' : 'data(color)',
                    'source-arrow-color' : 'data(color)',
                    'target-arrow-color' : 'data(color)',
                    'label' : 'data(label)',
                    'line-style' : 'data(style)',
                    'font-size' : 11,
                    'text-background-color' : '#ffffff',
                    'text-background-opacity' : 1,
                    'text-background-padding' : 5,
                    'text-background-shape' : 'roundrectangle',
                    'edge-text-rotation' : 0
                }).update();
            }

            function vertical() {
                cy.style().selector('edge').style({
                    'curve-style' : 'bezier',
                    'opacity' : 1,
                    'width' : 'mapData(strength, 0, 100, 1, 6)',
                    'target-arrow-shape' : 'triangle',
                    'color' : 'data(color)',
                    'line-color' : 'data(color)',
                    'source-arrow-color' : 'data(color)',
                    'target-arrow-color' : 'data(color)',
                    'label' : 'data(label)',
                    'line-style' : 'data(style)',
                    'font-size' : 11,
                    'text-background-color' : '#ffffff',
                    'text-background-opacity' : 1,
                    'text-background-padding' : 5,
                    'text-background-shape' : 'roundrectangle',
                    'edge-text-rotation' : 0
                }).update();
            }
            
            function layout() {
                if(layout_model == 1) layout_breadthfirst();
                else if(layout_model == 2) layout_cola();
                else if(layout_model == 3) layout_cose();
                else if(layout_model == 4) layout_dagre_LR();
                else if(layout_model == 5) layout_dagre_TB();
                else if(layout_model == 6) layout_klay_LR();
                else if(layout_model == 7) layout_klay_TB();
            }

            function layout_breadthfirst() {
                layout_model = 1;
                cy.elements().layout({
                    name: 'breadthfirst',
                    directed: true,
                    spacingFactor: 0.75
                }).run();
            }

            function layout_cola() {
                layout_model = 2;
                cy.elements().layout({
                    name : 'cola',
                    animate : false,
                    nodeSpacing : function(node){ return 25; }
                    <!--flow : {-->
                        <!--axis : 'x',-->
                        <!--minSeparation : 150-->
                    <!--}-->
                }).run();
            }

            function layout_cose() {
                layout_model = 3;
                cy.elements().layout({
                    name : 'cose-bilkent',
                    nodeRepulsion : 10000,
					nestingFactor: 1,
                    idealEdgeLength: 75,
                    edgeElasticity : 1,
                    animate : false,
                    randomize :false
                }).run();
            }

            function layout_dagre_LR() {
                layout_model = 4;
                cy.elements().layout({
                    name : 'dagre',
                    avoidOverlap : true,
                    rankDir : 'LR'
                }).run();
            }

            function layout_dagre_TB() {
                layout_model = 5;
                cy.elements().layout({
                    name : 'dagre',
                    avoidOverlap : true,
                    rankDir : 'TB'
                }).run();
            }

            function layout_klay_LR() {
                layout_model = 6;
                cy.elements().layout({
                    name : 'klay',
                    klay : {
                        spacing : 50,
                        addUnnecessaryBendpoints : true,
                        direction : 'RIGHT',
                        edgeSpacingFactor : 0.1,
                        edgeRouting : 'POLYLINE',
                        fixedAlignment : 'BALANCED',
                        inLayerSpacingFactor : 2.0,
                        layoutHierarchy : true,
                        linearSegmentsDeflectionDampening: 1,
                        nodeLayering :'LONGEST_PATH',
                        nodePlacement :'LINEAR_SEGMENTS',
                        routeSelfLoopInside : true,
                        thoroughness: 10
                    }
                }).run()
            }

            function layout_klay_TB() {
                layout_model = 7;
                cy.elements().layout({
                    name : 'klay',
                    klay : {
                        spacing : 50,
                        addUnnecessaryBendpoints : true,
                        direction : 'DOWN',
                        edgeSpacingFactor : 0.1,
                        edgeRouting : 'POLYLINE',
                        fixedAlignment : 'BALANCED',
                        inLayerSpacingFactor : 2.0,
                        layoutHierarchy : true,
                        linearSegmentsDeflectionDampening: 1,
                        nodeLayering :'LONGEST_PATH',
                        nodePlacement :'LINEAR_SEGMENTS',
                        routeSelfLoopInside : true,
                        thoroughness: 10
                    }
                }).run()
            }

            function removeEdge(event) {
                var edge = event.target;
                var source = edge.source();
                var target = edge.target();

                var mes1 = source.data("name");
                mes1 = mes1.substring(0, mes1.lastIndexOf("\n") - 1);
                if(mes1 == "") mes1 = "|>"

                var mes2 = " => ";

                var mes3 = target.data("name");
                mes3 = mes3.substring(0, mes3.lastIndexOf("\n") - 1);
                if(mes3 == "") mes3 = "[]"

                var removed = mes1.concat(mes2, mes3);
                if(!ctrlIsPressed) zAu.send(new zk.Event(zk.Widget.$('$animate'), 'onEdgeRemoved', removed));
                else zAu.send(new zk.Event(zk.Widget.$('$animate'), 'onEdgeRetained', removed));
            }

            function removeNode(event, remove) {
                var node = event.target;
                if(node.data("name") != "") {
                    var mes1 = node.data("name");
                    var removed = mes1.substring(0, mes1.lastIndexOf("\n") - 1);
                    if(!ctrlIsPressed && !shiftIsPressed) zAu.send(new zk.Event(zk.Widget.$('$animate'), 'onNodeRemovedTrace', removed));
                    else if(ctrlIsPressed && !shiftIsPressed) zAu.send(new zk.Event(zk.Widget.$('$animate'), 'onNodeRetainedTrace', removed));
                    else if(!ctrlIsPressed && shiftIsPressed) zAu.send(new zk.Event(zk.Widget.$('$animate'), 'onNodeRemovedEvent', removed));
                    else zAu.send(new zk.Event(zk.Widget.$('$animate'), 'onNodeRetainedEvent', removed));
                }
            }

            function rediscover() {
                var json = cy.json();
                zAu.send(new zk.Event(zk.Widget.$('$animate'), 'onNodeFiltered', json));
            }

            function animate() {
                var json = cy.json();
                zAu.send(new zk.Event(zk.Widget.$('$animate'), 'onAnimate', json));
            }

            function exportFitted() {
                var json = cy.json();
                zAu.send(new zk.Event(zk.Widget.$('$exportFitted'), 'onExport', json));
            }

            function exportUnfitted() {
                var json = cy.json();
                zAu.send(new zk.Event(zk.Widget.$('$exportUnfitted'), 'onExport', json));
            }

            function downloadPDF(name) {
                // only jpeg is supported by jsPDF

                var apromoreLogo = new Image();
                apromoreLogo.src = 'img/apromore_logo.png';
                apromoreLogo.style.height = '395px';
                apromoreLogo.style.width = '390px';
                apromoreLogo.onload = function() {
                    var imgData = new Image();
                    imgData.src = 'data:image/png;base64,' + cy.png({full : true, output : 'base64'});
                    imgData.onload = function(){
                        var canvas = document.createElement('canvas');
                        var context = canvas.getContext('2d');
                        canvas.width = imgData.width + apromoreLogo.width + 40;
                        canvas.height = imgData.height + apromoreLogo.height + 40;
                        context.fillStyle = 'white';
                        context.fillRect(0, 0, canvas.width, canvas.height);

                        context.drawImage(imgData, 20, apromoreLogo.height + 20);
                        context.drawImage(apromoreLogo, imgData.width + 20, 20);

                        context.font = "900 50px Arial";
                        context.fillStyle = "black";
                        context.fillText("Apromore",imgData.width + 100, 450);

                        var pdf = new jsPDF('l', 'pt', 'a1');
                        var img = new Image();
                        img.src = canvas.toDataURL();
                        img.onload = function() {
                            var x = img.width;
                            var y = img.height;
                            var s = 1;
                            while((s * x) > 2300 || (s * y) > 1600) {
                                if((s * x) > 2300) {
                                    s = 2300 / x;
                                }
                                if((s * y) > 1600) {
                                    s = 1600 / y;
                                }
                            }
                            pdf.addImage(img, 'PNG', 40, 40, (s * x), (s * y));
                            pdf.save(name + ".pdf");
                        }
                    }
                }
            }

            function downloadPNG(name) {
                var apromoreLogo = new Image();
                apromoreLogo.src = 'img/apromore_logo.png';
                apromoreLogo.style.height = '395px';
                apromoreLogo.style.width = '390px';
                apromoreLogo.onload = function() {
                    var imgData = new Image();
                    imgData.src = 'data:image/png;base64,' + cy.png({full : true, output : 'base64'});
                    imgData.onload = function(){
                        var canvas = document.createElement('canvas');
                        var context = canvas.getContext('2d');
                        canvas.width = imgData.width + apromoreLogo.width + 40;
                        canvas.height = imgData.height + apromoreLogo.height + 40;
                        context.fillStyle = 'white';
                        context.fillRect(0, 0, canvas.width, canvas.height);

                        context.drawImage(imgData, 20, apromoreLogo.height + 20);
                        context.drawImage(apromoreLogo, imgData.width + 20, 20);

                        context.font = "900 50px Arial";
                        context.fillStyle = "black";
                        context.fillText("Apromore",imgData.width + 100, 450);

                        var element = document.createElement('a');
                        element.href = canvas.toDataURL();
                        element.download = name + ".png";
                        element.click();
                    };
                };
            }

            zk.afterMount(function() {
                init();
                zAu.send(new zk.Event(zk.Widget.$('$win'), 'onLoaded'));
            });


        ]]>
        </script>
    </vbox>
</window>

