<?component name="menuitem" extends="menuitem" autocheck="true" checkmark="true" ?>
<!--
 ~ Copyright Â© 2019 The University of Melbourne.
 ~
 ~ This file is part of "Apromore".
 ~
 ~ "Apromore" is free software; you can redistribute it and/or modify
 ~ it under the terms of the GNU Lesser General Public License as
 ~ published by the Free Software Foundation; either version 3 of the
 ~ License, or (at your option) any later version.
 ~
 ~ "Apromore" is distributed in the hope that it will be useful, but
 ~ WITHOUT ANY WARRANTY; without even the implied warranty
 ~ of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 ~ See the GNU Lesser General Public License for more details.
 ~
 ~ You should have received a copy of the GNU Lesser General Public
 ~ License along with this program.
 ~ If not, see <http://www.gnu.org/licenses/lgpl-3.0.html>.
 -->

<?page title="Apromore - Process Discoverer" contentType="text/html;charset=UTF-8" ?>
<?link rel="shortcut icon" href="/img/favicon.ico" ?>
<zk xmlns="http://www.zkoss.org/2005/zul"
	xmlns:h="http://www.w3.org/1999/xhtml"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.zkoss.org/2005/zul http://www.zkoss.org/2005/zul/zul.xsd"
	xmlns:x="xhtml" xmlns:zk="zk" xmlns:w="client" xmlns:n="native">

	<style src="/css/apromoreOld.css"/>
	<style src="/css/site.css"/>
	<style src="/css/tippy.v4.0.1.css"/>

	<script type="text/javascript" src="/js/jquery.js"></script>
	<script src="/js/pdf.v1.10.100.js"></script>
	<script src="/js/jspdf.v1.4.1.debug.js"></script>
	<script src="/js/canvas2svg.v1.0.19.js"></script>
	<script src="/js/cytoscape.v3.2.18.min.js"></script>
	<script src="/js/cytoscape-svg-convertor.js"></script>
	<script src="/js/dagre.v0.8.2.min.js"></script>
	<script src="/js/cytoscape-dagre.v2.2.2.js"></script>
	<script src="/js/popper.v1.14.7.min.js"></script>
	<script src="/js/cytoscape-popper.v1.0.4.js"></script>
	<script src="/js/tippy.v4.0.1.min.js"></script>
	<script src="/js/cytoscape-undo-redo.js"></script>
	<script src="/js/cytoscape-edge-bend-editing.js"></script>

	<h:link rel="stylesheet" href="/chiaroscuro.css" type="text/css"/>
	<custom-attributes theme="{labels.ap.theme}"/>
	<h:link rel="stylesheet" href='/themes/${theme}/common/css/index.css' type="text/css"/>
	<h:link rel="stylesheet" href="../css/ap/pd.css" type="text/css"/>

	<style src="../css/moonstyle.css"/>

	<style dynamic="true">
		tr.z-row td.z-row-inner, tr.z-row td.z-cell, tr.z-group td.z-group-inner, tr.z-groupfoot td.z-groupfoot-inner {
		padding: 1px 1px 1px 1px;
		}
		td.z-listcell {
		border: 1px solid transparent;
		}
		tr.z-row td.z-row-inner, tr.z-row .z-cell {
		line-height: 25px;
		}
		div.z-listbox-body .z-listcell {
		padding: 0;
		}

		tr.z-row-disabled td.z-row-inner .z-slider-area  {
		padding: 1px 1px 1px 1px;
		line-height: 25px;
		background: none repeat scroll 0% 0% #AAA;
		}

		tr.z-row-disabled .z-slider-button {
		background: #AAA;
		}


		div.z-listcell-cnt {
		line-height: 25px;
		padding: 1px 0;
		}
		.z-listbox-autopaging .z-listcell-cnt {
		/*height: 25px;*/
		overflow: hidden;
		vertical-align: middle;
		}
		tbody.z-listbox-empty-body tr {
		color: #000000;
		height: 25px;
		font-size: 12px;
		font-weight: normal;
		text-decoration: none;
		}
		tbody.z-listbox-empty-body td {
		color: #7D7D7D;
		line-height: 25px;
		font-family: arial,sans-serif;
		font-size: 12px;
		font-style: italic;
		font-weight: normal;
		text-align: center;
		}

		.z-caption.customIcon .z-caption-content {
		width: 100%;
		}

		.z-caption.customIcon {
		background: url("") no-repeat right 0;
		height: 16px;
		padding-right: 20px;
		font-weight: bold;
		float: right;
		}

		.z-caption.customIcon {
		background-position: right -16px;
		}

		.mainCaption {
		display: flex;
		}

		.mainCaption .z-caption-content {
		display: flex; flex-grow: 1;
		}

		.mainCaption .z-caption-content > .captionButtons {
		display: inline-block;
		flex-grow: 1;
		text-align: right;
		margin-right: 1px;
		}

		.optionButton {
		position: absolute;
		right: 10px;
		margin-right: 10px;
		min-width: 55px;
		}

		.shortcutButton {
		position: absolute;
		right: 75px;
		margin-right: 10px;
		min-width: 55px;
		}

		.helpButton {
		position: absolute;
		right: 140px;
		margin-right: 10px;
		min-width: 55px;
		}

		.shortcutPopup {
		background:rgba(0,255,0,0.3);
		margin-left: 0px;
		margin-right: 0px;
		}

		.z-caption.customPosition .z-caption-content i {
		position: absolute;
		right: 0px;
		font-size: 16px; }

		tr.z-grid-odd td.z-row-inner, tr.z-grid-odd .z-cell, tr.z-grid-odd, td.z-listcell {
		background: unset;
		}


		.z-label {
		color:unset;
		}

		.z-row-content {
		line-height: 0px;
		}

		.statsHead {
		}

		.z-column{
		border:0px;
		}

		.z-column-content {
		border:0px;
		background:#F0F0F0;
		color:#555;
		}

		.z-grid-header-border {
		border-bottom: 0px solid #FFF;
		}

		.z-groupbox {
		padding-top: 0px;
		}

		.z-groupbox>.z-groupbox-header {
		height: 8px;
		}

		.PDSliderContainer {
		margin-top:15px; padding:10px; border:1px solid #CCC; background:#FFF;
		}

		.statsGrid .z-grid-header{
		background:#F0F0F0;
		}
		.statsGrid .z-columns-bar {
		border:0px;
		}

	</style>
	<h:div class="ap-header">
		<h:a href="/"><h:div class="ap-header-logo"></h:div></h:a>
		<h:div class="ap-header-title">Process Discoverer</h:div>
		<h:div class="ap-help">
			<h:a href="https://apromore.org/documentation/features/discover-process-map" target="_blank">
				<h:button class="ap-icon ap-icon-help"/>
			</h:a>
		</h:div>
	</h:div>

	<window id="win" border="0" closable="false" height="100%" width="100%" sclass="ap-pd ap-font-base" use="org.apromore.plugin.portal.processdiscoverer.ProcessDiscovererController">
		<caption id="windowcaption" sclass="mainCaption">
		</caption>
		<div id="utilityTools" sclass="ap-pd-tools">
			<button id="optionButton" iconSclass="z-icon-caret-up" sclass="optionButton">
				<attribute name="onClick">
					<![CDATA[
                          optionButton.setIconSclass(optionbox.isOpen() ? "z-icon-caret-down" : "z-icon-caret-up");
                          optionButton.setLabel(optionbox.isOpen() ? " " : "");
                          optionbox.setOpen(!optionbox.isOpen());
                          Clients.evalJavaScript("resize();");
                          optionbox.invalidate();
                        ]]>
				</attribute>
			</button>

			<button id="shortcutButton" iconSclass="z-icon-keyboard-o" sclass="shortcutButton">
				<attribute name="onClick">
					<![CDATA[
                          shortcutPopup.open(self,"after_pointer");
                        ]]>
				</attribute>
			</button>

			<!--<a href="https://apromore.org/documentation/features/discover-process-map" target="_blank">
                <button iconSclass="z-icon-question" style="float: right;" height="26px" sclass="helpButton"></button>
            </a>-->
			<popup id="shortcutPopup" width="600px">
				<html>
					<![CDATA[
                  <ul>
                    <li><b>Right-click</b> on an arc: remove all traces containing the selected direct-follow relation</li>
                    <li><b>CTRL + Right-click</b> on an arc: retain only traces containing the selected direct-follow relation</li>
                    <li><b>Right-click</b> on a node: remove all traces with an event containing the selected attribute</li>
                    <li><b>CTRL + Right-click</b> on a node: retain only traces with an event containing the selected attribute</li>
                    <li><b>ALT + Right-click</b> on a node: remove all events containing the selected attribute</li>
                    <li><b>ALT + CTRL + Right-click</b> on a node: retain only events containing the selected attribute</li>
                  </ul>
                  ]]>
				</html>
			</popup>
		</div>
		<borderlayout hflex="1" vflex="1" style="border:0px; padding:0px;">
			<north hflex="1" style="border:0px; padding:0px;">
				<hbox width="100%" sclass="PDOptions">
					<groupbox id="optionbox" closable="true" mold="3d" open="true" style="background-color:none;" width="100%" >
						<hbox align="center" id="optiondetails" vflex="1" hflex="1" style="margin-top:3px;">
							<vbox width="200px">
								<groupbox closable="false"><caption height="20px">View</caption>
									<hlayout>
										<checkbox id="gateways" checked="false" label="BPMN" height="30px" width="100px" />
										<checkbox id="secondary" checked="false" label="Dual stats" height="30px" width="100px" style="margin-left:3px;"/>
									</hlayout>
								</groupbox>
								<groupbox closable="false" style="margin-top:3px;"><caption height="20px">Slider</caption>
									<radiogroup>
										<hbox align="left" pack="top">
											<radio id="use_fixed" label="Locked" selected="true" width="100px"/>
											<radio id="use_dynamic" label="Unlocked" width="100px"/>
										</hbox>
									</radiogroup>
									<vlayout style="margin-top:5px;">
										<checkbox id="inverted_nodes" checked="false" label="Invert nodes priority" height="30px" width="100px"/>
										<checkbox id="inverted_arcs" checked="false" label="Invert arcs priority" height="30px" width="100px"/>
									</vlayout>
								</groupbox>
							</vbox>


							<!-- Sliders: take the rest of the space -->
							<grid  vflex="1" hflex="1">
								<!-- Let ZK calculate the width -->
								<columns>
									<column width="70px" />
									<column hflex="1" />
									<column width="50px" />
								</columns>
								<rows>
									<row vflex="min">
										<label>Nodes</label>
										<slider id="slider1" mold="scale" maxpos="100"  width="99%" curpos="100"/>
										<intbox id="activityText" value="100" width="35px" />
									</row>
									<row vflex="min">
										<label>Arcs</label>
										<slider id="slider2" mold="scale" maxpos="100"  width="99%" curpos="10"/>
										<intbox id="arcText" value="10" width="35px" />
									</row>
									<row id="parallelismRow" vflex="min">
										<label id="parallelismLabel">Parallelism</label>
										<slider id="parallelismSlider" mold="scale" maxpos="100"  width="99%" curpos="40" />
										<intbox id="parallelismText" value="40" width="35px" />
									</row>
								</rows>
							</grid>

							<!-- Overview Statistics -->
							<vbox hflex="1" vflex="1" style="overflow:auto;">
								<grid sclass="statsGrid" hflex="1" vflex="1" span="true"  >
									<columns sizable="true">
										<column sclass="statsHead" label="Cases" align="center" width="12%"/>
										<column sclass="statsHead" label="Case variants" align="center" width="14%"/>
										<column sclass="statsHead" label="Events" align="center" width="12%"/>
										<column sclass="statsHead" label="Activities" align="center" width="12%"/>
										<column sclass="statsHead" label="Start time" align="center" width="25%"/>
										<column sclass="statsHead" label="End time" align="center" width="25%"/>
									</columns>
									<rows>
										<row valign="middle" style="padding-top:5px;">
											<label id="caseNumber">Cases</label>
											<label id="uniquecaseNumber">Case variants</label>
											<label id="eventNumber">Events</label>
											<label id="activityNumber">Activities</label>
											<label id="startTime">Start time</label>
											<label id="endTime">End time</label>
										</row>
									</rows>
								</grid>
								<grid sclass="statsGrid" hflex="1" vflex="1" span="true"  >
									<columns sizable="true">
										<column sclass="statsHead" label="Min duration" align="center" width="25%"/>
										<column sclass="statsHead" label="Median duration" align="center" width="25%"/>
										<column sclass="statsHead" label="Average duration" align="center" width="25%"/>
										<column sclass="statsHead" label="Max duration" align="center" width="25%"/>
									</columns>
									<rows>
										<row valign="middle" style="padding-top:5px;">
											<label id="minDuration">Activities</label>
											<label id="medianDuration">Activities</label>
											<label id="meanDuration">Activities</label>
											<label id="maxDuration">Activities</label>
										</row>
									</rows>
								</grid>
							</vbox>

						</hbox>
					</groupbox>
				</hbox>
			</north>
			<center style="border:0px; padding:0px;">
				<div width="100%" height="100%" style="border:0px solid #00F;">
					<n:table style="height:100%;width:100%;border:0px solid #F00;">
						<n:tr>
							<n:td>
							</n:td>
						</n:tr>
						<n:tr style="background-color:none;">
							<n:td>
								<grid id="actionband">
									<columns>
										<column width="9%"/>
										<column width="9%"/>
										<column width="9%"/>
										<column width="9%"/>
										<column width="9%"/>
										<column width="9%"/>
										<column width="9%"/>
										<column width="9%"/>
										<column width="9%"/>
										<column width="9%"/>
										<column width="10%"/>
									</columns>
									<rows>
										<row align="center">
											<combobutton id="export" label="Save" height="26px" hflex="1">
												<menupopup>
													<menuitem id="exportUnfitted" onClick='Clients.evalJavaScript("exportUnfitted()")' label="Save as filtered log..." onCheck='exportUnfitted.setChecked(false)'/>
													<menuitem id="exportBPMN" label="Save as BPMN Model..." onCheck='exportBPMN.setChecked(false)'/>
													<menuitem id="exportBPMNAnnotatedForBIMP" visible="false" label="Save as BPMN model annotated for BIMP..." onCheck='exportBPMNAnnotatedForBIMP.setChecked(false)'/>
													<menuitem id="downloadPDF" label="Print map as PDF" onCheck='downloadPDF.setChecked(false)'/>
													<menuitem id="downloadPNG" label="Print map as PNG" onCheck='downloadPNG.setChecked(false)'/>
												</menupopup>
											</combobutton>
											<combobutton id="layout" label="Layout" height="26px" hflex="1" onClick='layout_hiera.setChecked(true);layout_dagre_TB.setChecked(false);'>
												<menupopup>
													<menuitem id="layout_hiera" onClick='layout_hiera.setChecked(true);layout_dagre_TB.setChecked(false);' label="Left-to-right" checked="true" />
													<!--<menuitem id="layout_dagre_LR" onClick='layout_hiera.setChecked(false);layout_dagre_LR.setChecked(true);layout_dagre_TB.setChecked(false);layout_bf.setChecked(false);' label="Dagre Left-Right" checked="false" />-->
													<menuitem id="layout_dagre_TB" onClick='layout_hiera.setChecked(false);layout_dagre_TB.setChecked(true);' label="Top-to-bottom" checked="false" />
													<!--<menuitem id="layout_bf" onClick='layout_hiera.setChecked(false);layout_dagre_LR.setChecked(false);layout_dagre_TB.setChecked(false);layout_bf.setChecked(true);' label="Breadth-First" checked="false" />-->
												</menupopup>
											</combobutton>
											<button id="fitScreen" label="Fit to screen" height="26px" hflex="1" />
											<combobutton id="selector" label="Perspective" hflex="1" height="26px">
												<menupopup id="selectormenu" />
											</combobutton>
											<combobutton id="frequency" label="Frequency" height="26px" hflex="1" onClick="case_frequency.setChecked(true);absolute_frequency.setChecked(false);mean_frequency.setChecked(false);median_frequency.setChecked(false);mode_frequency.setChecked(false);max_frequency.setChecked(false);min_frequency.setChecked(false)">
												<menupopup>
													<menuitem id="case_frequency" label="Case" checked="true" onCheck='absolute_frequency.setChecked(false);mean_frequency.setChecked(false);median_frequency.setChecked(false);mode_frequency.setChecked(false);max_frequency.setChecked(false);min_frequency.setChecked(false)' />
													<menuitem id="absolute_frequency" label="Cumulative" onCheck='case_frequency.setChecked(false);mean_frequency.setChecked(false);median_frequency.setChecked(false);mode_frequency.setChecked(false);max_frequency.setChecked(false);min_frequency.setChecked(false)' />
													<menuitem id="mean_frequency" label="Average" onCheck='absolute_frequency.setChecked(false);case_frequency.setChecked(false);median_frequency.setChecked(false);mode_frequency.setChecked(false);max_frequency.setChecked(false);min_frequency.setChecked(false)' />
													<menuitem id="median_frequency" label="Median" onCheck='absolute_frequency.setChecked(false);case_frequency.setChecked(false);mean_frequency.setChecked(false);mode_frequency.setChecked(false);max_frequency.setChecked(false);min_frequency.setChecked(false)' />
													<menuitem id="mode_frequency" label="Mode" onCheck='absolute_frequency.setChecked(false);case_frequency.setChecked(false);mean_frequency.setChecked(false);median_frequency.setChecked(false);max_frequency.setChecked(false);min_frequency.setChecked(false)' />
													<menuitem id="max_frequency" label="Max" onCheck='absolute_frequency.setChecked(false);case_frequency.setChecked(false);mean_frequency.setChecked(false);median_frequency.setChecked(false);mode_frequency.setChecked(false);min_frequency.setChecked(false)' />
													<menuitem id="min_frequency" label="Min" onCheck='absolute_frequency.setChecked(false);case_frequency.setChecked(false);mean_frequency.setChecked(false);median_frequency.setChecked(false);mode_frequency.setChecked(false);max_frequency.setChecked(false)' />
												</menupopup>
											</combobutton>
											<combobutton id="duration" label="Duration" height="26px" hflex="1" onClick="total_duration.setChecked(false);median_duration.setChecked(false);mean_duration.setChecked(true);max_duration.setChecked(false);min_duration.setChecked(false)">
												<menupopup>
													<menuitem id="total_duration" label="Cumulative" onCheck='median_duration.setChecked(false);mean_duration.setChecked(false);max_duration.setChecked(false);min_duration.setChecked(false)' />
													<menuitem id="mean_duration" label="Average" checked="true" onCheck='median_duration.setChecked(false);total_duration.setChecked(false);max_duration.setChecked(false);min_duration.setChecked(false)' />
													<menuitem id="median_duration" label="Median" onCheck='total_duration.setChecked(false);mean_duration.setChecked(false);max_duration.setChecked(false);min_duration.setChecked(false)' />
													<menuitem id="max_duration" label="Max" onCheck='median_duration.setChecked(false);mean_duration.setChecked(false);total_duration.setChecked(false);min_duration.setChecked(false)' />
													<menuitem id="min_duration" label="Min" onCheck='median_duration.setChecked(false);mean_duration.setChecked(false);max_duration.setChecked(false);total_duration.setChecked(false)' />
												</menupopup>
											</combobutton>
											<button id="filter" label="Filter" height="26px" hflex="1" />
											<button id="details" label="Activities" height="26px" hflex="1" />
											<button id="cases" label="Cases" height="26px" hflex="1" />
											<button id="fitness" label="Fitness" height="26px" hflex="1" />
											<button id="animate" height="26px" hflex="1" onClick='Clients.evalJavaScript("animate()")' label="Animate" />
										</row>
									</rows>
								</grid>
							</n:td>
						</n:tr>

						<n:tr>
							<n:td style="height:100%;width:100%;">
								<n:div id="cy" style="height:100%;width:100%;background-color:none;" />
							</n:td>
						</n:tr>
					</n:table>
				</div>
			</center>
		</borderlayout>


	</window>

	<script src="https://cdnjs.cloudflare.com/ajax/libs/svg.js/2.6.5/svg.min.js"></script>
	<script type="text/javascript">
		<![CDATA[
		var currentLayout = 0, ctrlIsPressed = !1, altIsPressed = !1;
		var currentZoomLevel = 1;
		var currentPanPosition;
        var smallViewportHeight=0;
		var initialLoaded = true; // whether the graph is first open.
		var loadTraceMode = false; // indidate that the graph is loading a trace, not a full log
		
		function init() {
		  var a = window.cy = cytoscape({
			container: document.getElementById("cy"),
			zoom: 1,
			minZoom: 1E-50,
			maxZoom: 1E50,
			zoomingEnabled: !0,
			userZoomingEnabled: !0,
			panningEnabled: !0,
			userPanningEnabled: !0,
			wheelSensitivity: .1,
			style: [{
			  selector: "node",
			  style: {
				"background-color": "data(color)",
				"border-color": "black",
				"border-width": "data(borderwidth)",
				color: "data(textcolor)",
				content: "data(name)",
				"font-size": "data(textsize)",
				height: "data(height)",
				padding: 0,
				shape: "data(shape)",
				"text-border-width": 0,
				"text-max-width": "data(textwidth)",
				"text-valign": "center",
				"text-wrap": "wrap",
				width: "data(width)"
			  }
			}, {
			  selector: "edge",
			  style: {
				color: "data(color)",
				"curve-style": "bezier",
				"edge-text-rotation": 0,
				"font-size": 16,
				label: "data(label)",
				"line-color": "data(color)",
				"line-style": "data(style)",
				"loop-sweep": 181,
				"loop-direction": -41,
				opacity: 1,
				"source-arrow-color": "data(color)",
				"target-arrow-color": "data(color)",
				"target-arrow-shape": "triangle",
				"text-background-color": "#ffffff",
				"text-background-opacity": 0,
				"text-background-padding": 5,
				"text-background-shape": "roundrectangle",
				"text-wrap": "wrap",
				"text-margin-y": -16,
				width: "mapData(strength, 0, 100, 1, 6)",
				"control-point-step-size": 60
			  }
			}, {
				selector: ":selected",
				style: {
					"line-color": "#ffa500",
					"target-arrow-color": "#ffa500",
					"color": "#ffa500",
					"line-style": "solid",
					"border-color": "#ffa500",
					"border-width": "2px"
				}
			}],
			elements: {
			  nodes: [],
			  edges: []
			}
		  });
			
			// Convert a rendered position to a model position
			cy.toModelPosition = (pos) => {
					const pan = cy.pan();
					const zoom = cy.zoom();
					return {
							x: (pos.x - pan.x) / zoom,
							y: (pos.y - pan.y) / zoom,
					};
			};
			// Convert a model position to a rendered position
			cy.toRenderedPosition = (pos) => {
					const pan = cy.pan();
					const zoom = cy.zoom();
					return {
							x: pos.x * zoom + pan.x,
							y: pos.y * zoom + pan.y,
					};
			};

			
		  a.on("cxttap", "edge", function(a) {
				if (!loadTraceMode) removeEdge(a)
		  });
		  
		  a.on("cxttap", "node", function(a) {
				if (!loadTraceMode) removeNode(a)
		  });
			
		  
		  a.on("zoom", function(event) {
				if (!loadTraceMode) currentZoomLevel = a.zoom();
		  });
		  
		  a.on("pan", function(event) {
				if (!loadTraceMode) currentPanPosition = a.pan();
		  });		
			
			var currentNodeTooltip;
			cy.on('mouseover', 'node', function(event) {
				var node = event.target;
				if (node.data("oriname")) {
					currentNodeTooltip = makeTippy(node, node.data("oriname"));
					currentNodeTooltip.show();
				}
				else {
					currentNodeTooltip = undefined;
				}
			});
			
			cy.on('mouseout', 'node', function(event) {
				if (currentNodeTooltip) currentNodeTooltip.hide();
			});
			
            $(document).keydown(function(a) {
				if (a.ctrlKey || 17 == a.keyCode || 17 == a.which) ctrlIsPressed = !0;
				if (a.altKey || 18 == a.keyCode || 18 == a.which) altIsPressed = !0;

				if (a.ctrlKey && a.which == '90') {
					cy.undoRedo().undo();	     
				}
				else if (a.ctrlKey && a.which == '89') {
					cy.undoRedo().redo();     
				}
			}).keyup(function() {
				altIsPressed = ctrlIsPressed = !1;
				//console.log(ctrlIsPressed);
				//console.log(altIsPressed)
			});
			
		}
    
    function resize() {
      var optionbox = zk.Widget.$("$optionbox");
      
      //Some caveats of cytoscape
      //Need to set width in exact pixels since cy.resize() will expand the viewport slightly
      //Cytoscape.resize() can recalculate the height accurately with 100% setting when groupbox is open 
      //However, it is not able to do that when groupbox is collapsed.
      //Therefore the height must be remembered and set in pixels when groupbox is collapsed
      if (!optionbox.isOpen()) {
        document.getElementById('cy').setAttribute("style","width:"+window.cy.width()+"px;height:100%;");
      }
      else {
        document.getElementById('cy').setAttribute("style","width:"+window.cy.width()+"px;height:"+smallViewportHeight+"px;");
      }
      
      window.cy.resize();
      window.cy.fit();
    }

		
		function makeTippy(node, text){
				return tippy( node.popperRef(), {
					content: function(){
						var div = document.createElement('div');

						div.innerHTML = text;

						return div;
					},
					trigger: 'manual',
					arrow: true,
					placement: 'bottom',
					hideOnClick: true,
					multiple: false,
					sticky: true
				} );
		}

		function reset() {
		  //cy.elements().remove();
			cy.destroy(); // must destroy instead of removing elements because some style settings are retained through different actions, e.g. the curve-style.
		}
		
		function load(json, layout_option, retain) {
		  currentLayout = layout_option;
			
          // need to set the current zoom/pan level again as the reset/zoom/pan actions will generate zoom and pan events and change them.
		  var zoom = currentZoomLevel; 
		  var pan = currentPanPosition;
			
		  loadTraceMode = false;
		  reset();
          init();
			
		  //console.log(json);
		  cy.add($.parseJSON(json)); 
			layout(layout_option);
			
		  if (retain) {
			  window.cy.zoom(zoom);
			  window.cy.pan(pan);
			  currentZoomLevel = zoom; 
			  currentPanPosition = pan;
		  }
		  else {
              fitToWindow(layout_option);
		  }
      
      if (smallViewportHeight==0) {
        smallViewportHeight = window.cy.height();
      }
			
			cy.edgeBendEditing({
													undoable: true,
													initBendPointsAutomatically: false,
													enabled: true,
													bendShapeSizeFactor: 6
												});
												
			
		}
		
		function loadTrace(a) {
            loadTraceMode = true;
            reset();
			init();
            cy.add($.parseJSON(a)); 
            layout_dagre_LR(false);
            fitToWindow(1);
		}
		
		function fitToWindow(layout_option) {
			if (window.cy) {
				cy.fit();
				//moveTop(layout_option);
			}
		}
		
		function centerToWindow(layout_option) {
			if (window.cy) {
				cy.center();
				//moveTop(layout_option);
			}
		}
		
		function moveTop(layout_option) {
			var currentPos = cy.pan();
			var box = cy.elements().boundingBox({includeNodes: true, includeEdges: true});
			//window.alert(cy.zoom() + "," + box.h);
			switch(layout_option) {
				case 0:
				case 1:
					if (cy.zoom() > 1.0) {
						cy.pan({x: currentPos.x, y: -box.y1 + 10});
					}
					else {
						cy.pan({x: currentPos.x, y: -box.y1*cy.zoom() + 10});
					}
					break;				
				case 2:
					cy.center(cy.nodes().filter(function( ele ){
                                                    return ele.data('oriname') == "|>";
                                                }));
					cy.pan({x: currentPos.x, y: 0 });
					break;
				case 3:
					cy.fit();
					break;
				default:
					// code block
			}
		}

		function layout(layout_option) {
			switch(layout_option) {
				case 0:
					layout_manual_bezier(!0);
					break;				
				case 1:
					layout_dagre_LR(!0);
					break;
				case 2:
					layout_dagre_TB(!0);
					break;					
				case 3:
					layout_breadthfirst(!0);
					break;
				default:
					// code block
			}
		}
		
		function layout_manual_bezier(a) {
		  cy.style().selector("edge").style({
			"curve-style": function( ele ){ return ele.data('edge-style')},
			"edge-distances": "intersection",	
			"control-point-distances": function( ele ){ if (ele.data('edge-style')=="unbundled-bezier") {return ele.data('point-distances')} else {return "0"}},
			"control-point-weights": function( ele ){ if (ele.data('edge-style')=="unbundled-bezier") {return ele.data('point-weights')} else {return "0.5"}}
		  }).update();
			
		  cy.elements().layout({
			name: "preset"
		  }).run();		  
		}		

		function layout_dagre_LR(a) {
		  cy.elements().layout({
			name: "dagre",
			avoidOverlap: !0,
			edgeSep: 50,
			nodeSep: 110,
			randomize: false,
			rankDir: "LR",
			ranker: "network-simplex"
		  }).run()
		}
		
		function layout_dagre_TB(a) {
			cy.style().selector("edge").style({
				"text-background-opacity": 1,
				"text-margin-y": 0
		  }).update();			
			
		  cy.elements().layout({
			name: "dagre",
			avoidOverlap: !0,
			edgeSep: 50,
			nodeSep: 110,
			randomize: a,
			rankDir: "TB",
			ranker: "tight-tree"
		  }).run()
		}
		
		function layout_breadthfirst(a) {
			cy.style().selector("edge").style({
				"text-background-opacity": 1,
				"text-margin-y": 0
		  }).update();
			
		  cy.elements().layout({
			name: "breadthfirst",
			directed: !0,
			spacingFactor: 1,
			avoidOverlap: true
		  }).run();
		}		
		
		function pos(a, b) {
		  var c = 0,
			e = 0,
			d;
		  for (d in a.incomers().sources().outgoers().targets()) c += d.position()[0], e += 1;
		  return 0 == e ? 0 : c / e
		}

		function removeEdge(a) {
		  var b = a.target;
		  a = b.source();
		  b = b.target();
		  a = a.data("oriname");
		  //a = a.substring(0, a.indexOf("\n"));
		  if (a == "") {
			  a = "|>";
		  }
		  b = b.data("oriname");
		  //b = b.substring(0, b.indexOf("\n"));
		  if (b == "") {
			  b = "[]";
		  }
		  a = a.concat(" => ", b);
		  if (ctrlIsPressed) {
				zAu.send(new zk.Event(zk.Widget.$("$animate"), "onEdgeRetained", a));
			}
			else {
				zAu.send(new zk.Event(zk.Widget.$("$animate"), "onEdgeRemoved", a));
			}
			
		}

		function removeNode(a, b) {
		  var c = a.target;
		  if (c.data("oriname") != "") {
			  c = c.data("oriname");
			  //c = c.substring(0, c.indexOf("\n"));
			  //console.log("CTRL " + ctrlIsPressed);
			  //console.log("ALT " + altIsPressed);
				if (ctrlIsPressed || altIsPressed) {
					if (ctrlIsPressed && !altIsPressed) {
						zAu.send(new zk.Event(zk.Widget.$("$animate"), "onNodeRetainedTrace", c));
					}
					else if (!ctrlIsPressed && altIsPressed) {
						zAu.send(new zk.Event(zk.Widget.$("$animate"), "onNodeRemovedEvent", c));
					}
					else {
						zAu.send(new zk.Event(zk.Widget.$("$animate"), "onNodeRetainedEvent", c));
					}
				}
				else {
					zAu.send(new zk.Event(zk.Widget.$("$animate"), "onNodeRemovedTrace", c));
				}
		  }

		}
	

		function rediscover() {
		  var a = cy.json();
		  zAu.send(new zk.Event(zk.Widget.$("$animate"), "onNodeFiltered", a))
		}

		function animate() {
		  var a = cy.json();
		  zAu.send(new zk.Event(zk.Widget.$("$animate"), "onAnimate", a))
		}

		function exportFitted() {
		  var a = cy.json();
		  zAu.send(new zk.Event(zk.Widget.$("$exportFitted"), "onExport", a))
		}

		function exportUnfitted() {
		  var a = cy.json();
		  zAu.send(new zk.Event(zk.Widget.$("$exportUnfitted"), "onExport", a))
		}

		function downloadPDF(a) {
		  var b = new Image;
		  b.src = "/img/apromore_logo.png";
		  b.style.height = "395px";
		  b.style.width = "390px";
		  b.onload = function() {
			var c = new Image;
			c.src = "data:image/png;base64," + cy.png({
			  full: !0,
			  output: "base64"
			});
			c.onload = function() {
			  var e = document.createElement("canvas"),
				d = e.getContext("2d");
			  e.width = c.width + b.width + 40;
			  e.height = c.height + b.height + 40;
			  d.fillStyle = "white";
			  d.fillRect(0, 0, e.width, e.height);
			  d.drawImage(c, 20, b.height + 20);
			  d.drawImage(b, c.width + 20, 20);
			  d.font = "900 50px Arial";
			  d.fillStyle =
				"black";
			  d.fillText("Apromore", c.width + 100, 450);
			  var g = new jsPDF("l", "pt", "a1"),
				f = new Image;
			  f.src = e.toDataURL();
			  f.onload = function() {
				for (var b = f.width, c = f.height, d = 1; 2300 < d * b || 1600 < d * c;) 2300 < d * b && (d = 2300 / b), 1600 < d * c && (d = 1600 / c);
				g.addImage(f, "PNG", 40, 40, d * b, d * c);
				g.save(a + ".pdf")
			  }
			}
		  }
		}

		function downloadPNG(a) {
		  var b = new Image;
		  b.src = "/img/apromore_logo.png";
		  b.style.height = "395px";
		  b.style.width = "390px";
		  b.onload = function() {
			var c = new Image;
			c.src = "data:image/png;base64," + cy.png({
			  full: !0,
			  output: "base64"
			});
			c.onload = function() {
			  var e = document.createElement("canvas"),
				d = e.getContext("2d");
			  e.width = c.width + b.width + 40;
			  e.height = c.height + b.height + 40;
			  d.fillStyle = "white";
			  d.fillRect(0, 0, e.width, e.height);
			  d.drawImage(c, 20, b.height + 20);
			  d.drawImage(b, c.width + 20, 20);
			  d.font = "900 50px Arial";
			  d.fillStyle =
				"black";
			  d.fillText("Apromore", c.width + 100, 450);
			  d = document.createElement("a");
			  d.href = e.toDataURL();
			  d.download = a + ".png";
			  d.click()
			}
		  }
		}
		
		zk.afterMount(function() {
		  init();
		  zAu.send(new zk.Event(zk.Widget.$("$win"), "onLoaded"))
		});
	]]>
	</script>

	<!-- Following script improves performance of listbox dropdown display time-->
	<script defer="true">
		<![CDATA[
            zul.inp.Combobox.prototype.slideDown_ = function(pp) {
                pp.style.visibility = "visible";
                pp.style.display = "block";
            };
            zul.inp.Bandbox.prototype.slideDown_ = zul.inp.Combobox.prototype.slideDown_;
        ]]>
	</script>
</zk>
